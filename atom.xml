<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Watson's Blog]]></title>
  <link href="http://watson1978.github.io/atom.xml" rel="self"/>
  <link href="http://watson1978.github.io/"/>
  <updated>2013-12-02T08:29:33+09:00</updated>
  <id>http://watson1978.github.io/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotionアプリ開発に、motion-mode + Rubocop を導入]]></title>
    <link href="http://watson1978.github.io/blog/2013/12/02/development-rubymotion-app-with-motion-mode-plus-rubocop/"/>
    <updated>2013-12-02T08:05:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/12/02/development-rubymotion-app-with-motion-mode-plus-rubocop</id>
    <content type="html"><![CDATA[<p>この記事ではmotion-modeとrubocopをEmacsに導入してRubyMotionアプリ開発で活用する方法について扱います。motion-modeについては作者の<a href="http://qiita.com/ainame">ainame</a>さんが何か書いてくださるそうなので期待しましょう。</p>

<p><a href="https://github.com/bbatsov/rubocop">Rubocop</a>はアプリがsnake caseとcamel caseが入り乱れていないかなど、一貫したルールでコードが記述されているかチェックしてくれるツールです。チームで開発する際はもちろん一人でコードを記述する際にも一貫したコードは、可読性が向上し将来的にメンテナンスが容易になることでしょう。</p>

<!-- more -->


<h2>1. Rubocopをインストール</h2>

<p>RubocopはRubyGems経由でインストールするできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% gem install robocop</span></code></pre></td></tr></table></div></figure>


<h2>2.  Emacsのパッケージをインストール</h2>

<p>MELPA経由で以下のパッケージをインストールします。flycheckを導入しておくことで、Rubocopのチェック結果をよりわかりやすく表示できるようになります。</p>

<ul>
<li><a href="https://github.com/ainame/motion-mode">motion-mode</a></li>
<li><a href="https://github.com/flycheck/flycheck">flycheck</a></li>
<li><a href="https://github.com/bbatsov/rubocop-emacs">rubocop</a></li>
</ul>


<h2>3.  Emacsの設定</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</span><span class='line'>;; motion-mode
</span><span class='line'>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</span><span class='line'>(add-to-list 'load-path "~/.emacs.d/elisp/motion-mode")
</span><span class='line'>(require 'motion-mode)
</span><span class='line'>;; following adding of hook is very important.
</span><span class='line'>(add-hook 'ruby-mode-hook 'motion-recognize-project)
</span><span class='line'>(add-to-list 'ac-modes 'motion-mode)
</span><span class='line'>(add-to-list 'ac-sources 'ac-source-dictionary)
</span><span class='line'>;; set keybindings as you like
</span><span class='line'>(define-key motion-mode-map (kbd "C-c C-c") 'motion-execute-rake)
</span><span class='line'>(define-key motion-mode-map (kbd "C-c C-d") 'motion-dash-at-point)
</span><span class='line'>(define-key motion-mode-map (kbd "C-c C-p") 'motion-convert-code-region)
</span><span class='line'>
</span><span class='line'>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</span><span class='line'>;; rubocop
</span><span class='line'>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</span><span class='line'>(require 'rubocop)
</span><span class='line'>(add-hook 'ruby-mode-hook 'rubocop-mode)
</span><span class='line'>
</span><span class='line'>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</span><span class='line'>;; flycheck-mode
</span><span class='line'>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
</span><span class='line'>;; (add-hook 'after-init-hook #'global-flycheck-mode)
</span><span class='line'>(require 'flycheck)
</span><span class='line'>(add-hook 'ruby-mode-hook 'flycheck-mode)
</span><span class='line'>(flycheck-define-checker ruby-rubocop
</span><span class='line'>  "A Ruby syntax and style checker using the RuboCop tool.
</span><span class='line'>
</span><span class='line'>See URL `http://batsov.com/rubocop/'."
</span><span class='line'>  :command ("rubocop" "--format" "emacs" "--silent"
</span><span class='line'>            (config-file "--config" flycheck-rubocoprc)
</span><span class='line'>            source)
</span><span class='line'>  :error-patterns
</span><span class='line'>  ((warning line-start
</span><span class='line'>            (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
</span><span class='line'>            line-end)
</span><span class='line'>   (error line-start
</span><span class='line'>          (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
</span><span class='line'>          line-end))
</span><span class='line'>  :modes (enh-ruby-mode motion-mode))</span></code></pre></td></tr></table></div></figure>


<p>RubyMotionプロジェクトのファイルを開くと<code>rubocop</code>が動作するように<code>flycheck-define-checker</code>を追加しています。(Rubyのコードを開いたときにも<code>rubocop</code>が動作するようにしています)</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/0/2075/c33ff190-7337-2d59-0272-c39d43ec51b5.png" title="131128-0001.png" alt="131128-0001.png" /></p>

<p><code>rubocop</code>で指定されているコーディング規約に沿っていない箇所があれば、上の画像のように<code>?</code>が行頭に表示されるようです。</p>

<h2>4. .rubocop.yml</h2>

<p>いくつか<code>rubocop</code>のルールをカスタマイズしました。<code>.rubocop.yml</code>というファイルを<code>~/</code>やプロジェクトのルートに置くと良さそうです。</p>

<p>メソッド名、シンボル名がsnake caseになっているか、コメントがASCII文字だけか、1行あたりの文字数をチェックする機能を外しています。</p>

<figure class='code'><figcaption><span>.rubocop.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># disable to check whether method name use camel case.</span>
</span><span class='line'><span class="l-Scalar-Plain">MethodName</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># disable to check whether symbol name use camel case.</span>
</span><span class='line'><span class="l-Scalar-Plain">SymbolName</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># disable to check whether only ascii symbols in comments.</span>
</span><span class='line'><span class="l-Scalar-Plain">AsciiComments</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># disable to check whether lines is less than 80 characters.</span>
</span><span class='line'><span class="l-Scalar-Plain">LineLength</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">Enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>ほかのカスタマイズ項目については<a href="https://github.com/bbatsov/rubocop/tree/master/config">https://github.com/bbatsov/rubocop/tree/master/config</a>の<a href="https://github.com/bbatsov/rubocop/blob/master/config/default.yml">default.yml</a>を参考にすると良さそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最新の RubyMotion の試し方]]></title>
    <link href="http://watson1978.github.io/blog/2013/09/10/using-newest-or-previous-rubymotion/"/>
    <updated>2013-09-10T21:16:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/09/10/using-newest-or-previous-rubymotion</id>
    <content type="html"><![CDATA[<p>RubyMotion の新しいバージョンがリリースされる前に、先行して <a href="https://github.com/HipByte/RubyMotion">https://github.com/HipByte/RubyMotion</a> のリポジトリにパッチが push されている場合があります。</p>

<!-- more -->


<p>次のようにコマンドを実行すると、そのパッチを簡単に試すことができます。</p>

<h2>最新の RubyMotion (の一部) を試す</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git cone https://github.com/HipByte/RubyMotion.git
</span><span class='line'>% cd RubyMotion/
</span><span class='line'>% rake install
</span><span class='line'>mv /Library/RubyMotion/lib /Library/RubyMotion/lib.backup
</span><span class='line'>ln /Users/watson/tmp/RubyMotion/lib /Library/RubyMotion/lib</span></code></pre></td></tr></table></div></figure>


<p><code>/Library/RubyMotion/lib</code> が github からクローンしたものと置き換わります。元に戻す場合には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake uninstall
</span><span class='line'>rm /Library/RubyMotion/lib
</span><span class='line'>mv /Library/RubyMotion/lib.backup /Library/RubyMotion/lib</span></code></pre></td></tr></table></div></figure>


<p>とアンインストールします。</p>

<p>公開されていない部分の変更に依存しているパッチが push されていて、うまく動かない場合もあるかもしれませんので、自己責任でお試しください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5 Developer Preview を使って RubyMotion アプリをビルドする方法]]></title>
    <link href="http://watson1978.github.io/blog/2013/09/10/how-to-use-xcode5/"/>
    <updated>2013-09-10T21:16:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/09/10/how-to-use-xcode5</id>
    <content type="html"><![CDATA[<p><a href="http://rubymotion-tokyo.doorkeeper.jp/events/5652">http://rubymotion-tokyo.doorkeeper.jp/events/5652</a> に参加しながら、もくもくとブログを書いてます。</p>

<p>Xcode 5 Developer Preview を使って RubyMotion アプリをビルドする方法が分からないという方がおりましたので、今回はその方法を書いてみたいと思います。</p>

<p><img src="http://watson1978.github.io/images/blog/question_xcode_dp.png" alt="" /></p>

<!-- more -->


<h2>xcode-select を設定する</h2>

<p><code>xcode-select --print-path</code> を実行すると、デフォルトで使用する Xcode のパスが表示されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% xcode-select --print-path
</span><span class='line'>/Applications/Xcode.app/Contents/Developer</span></code></pre></td></tr></table></div></figure>


<p><code>xcode-select --switch</code> を使用し、これを Xcode 5 のパスへ変更します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo xcode-select --switch /Applications/Xcode5-DP6.app/Contents/Developer</span></code></pre></td></tr></table></div></figure>


<p>元に戻す場合には、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span></code></pre></td></tr></table></div></figure>


<p>と実行しましょう。</p>

<p>この方法では、全ての RubyMotion アプリのビルドに Xcode 5 Developer Preview が使用されるようになります。特定のアプリだけ、Xcode 5 を使ってビルドしたい場合には次の方法を試してください。</p>

<h2><code>app.xcode_dir</code> を設定する</h2>

<p>RubyMotion アプリの <code>Rakefile</code> で <code>app.xcode_dir</code> という項目を追加し Xcode のパスを設定すると、指定した Xcode を使用しアプリをビルドするようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">xcode_dir</span> <span class="o">=</span> <span class="s1">&#39;/Applications/Xcode5-DP6.app/Contents/Developer&#39;</span> <span class="c1"># 追加</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>元の Xcode を使いたくなった場合には <code>app.xcode_dir</code> の行を削除してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion アプリをシミュレーターで起動する際に言語を指定する]]></title>
    <link href="http://watson1978.github.io/blog/2013/07/16/changing-locale/"/>
    <updated>2013-07-16T21:16:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/07/16/changing-locale</id>
    <content type="html"><![CDATA[<p><a href="http://iphone-dev.g.hatena.ne.jp/ktakayama/20130619/1371621739">Xcode で起動時の言語指定方法</a> がこちらに書かれているのですが、RubyMotion では <code>rake</code> を実行する際に環境変数 <code>args</code> を利用して以下のように指定します。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake args="-AppleLanguages '(en)'"
</span><span class='line'>     Build ./build/iPhoneSimulator-6.1-Development
</span><span class='line'>  Simulate ./build/iPhoneSimulator-6.1-Development/Locale.app
</span><span class='line'>2013-07-07 22:47:22.293 Locale[13237:c07] foo
</span><span class='line'>
</span><span class='line'>% rake args="-AppleLanguages '(ja)'"
</span><span class='line'>     Build ./build/iPhoneSimulator-6.1-Development
</span><span class='line'>  Simulate ./build/iPhoneSimulator-6.1-Development/Locale.app
</span><span class='line'>2013-07-07 22:47:28.500 Locale[13335:c07] ほげ</span></code></pre></td></tr></table></div></figure>


<p>サンプルのプロジェクトは、以下の URL に置いてあります。</p>

<ul>
<li><a href="https://github.com/Watson1978/RubyMotionLocaleTest">https://github.com/Watson1978/RubyMotionLocaleTest</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion でスタティックライブラリを作成し、 Xcode プロジェクトで利用する]]></title>
    <link href="http://watson1978.github.io/blog/2013/06/06/creating-rubymotion-static-library/"/>
    <updated>2013-06-06T12:32:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/06/06/creating-rubymotion-static-library</id>
    <content type="html"><![CDATA[<p>RubyMotion Kaigi で質問があったので、RubyMotion を使ったスタティックライブラリの作り方と、Xcode プロジェクトへの組み込み方について書いてみました。</p>

<!-- more -->


<h2>RubyMotion プロジェクトを作成する</h2>

<p>まずは、RubyMotion のプロジェクトを作成してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% motion create TestStatic
</span><span class='line'>    Create TestStatic
</span><span class='line'>    Create TestStatic/.gitignore
</span><span class='line'>    Create TestStatic/app/app_delegate.rb
</span><span class='line'>    Create TestStatic/Rakefile
</span><span class='line'>    Create TestStatic/resources/Default-568h@2x.png
</span><span class='line'>    Create TestStatic/spec/main_spec.rb</span></code></pre></td></tr></table></div></figure>


<p>アプリケーションが起動する際にインスタンス化され呼び出されるクラスとして、<code>AppDelegate</code> があります。Xcode でプロジェクトを作成する際にも同盟のクラスが自動的に作成されます。シンボルが衝突したりすると面倒なので、クラス名を <code>AppDelegate</code> から <code>StaticAppDelegate</code> などに変更しておきます (<code>AppDelegate</code> そのものを削除しても良いのですが、RubyMotion で動作確認できなくなってしまうので、このようにしてます)。</p>

<figure class='code'><figcaption><span>app/app_delegate.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">StaticAppDelegate</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="ss">didFinishLaunchingWithOptions</span><span class="p">:</span><span class="n">launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Rakefile</code> を修正し <code>app.delegate_class</code> を設定して delegate クラスを変更したことを設定しておきます。</p>

<figure class='code'><figcaption><span>Rakefile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Use `rake config&#39; to see complete project settings.</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;TestStatic&#39;</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">delegate_class</span> <span class="o">=</span> <span class="s1">&#39;StaticAppDelegate&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コーディング</h2>

<p>ライブラリ化するコードを記述していきます。ここでは、文字列から UIColor オブジェクトを作成するものを書きました。</p>

<figure class='code'><figcaption><span>app/app_delegate.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NSString</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_color</span>
</span><span class='line'>    <span class="c1"># string like a &quot;#0c92f2&quot;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Unknown color scheme&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">!=</span> <span class="s1">&#39;#&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>    <span class="n">color</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">color</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="n">g</span> <span class="o">=</span> <span class="n">color</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">color</span><span class="o">[</span><span class="mi">4</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'>    <span class="no">UIColor</span><span class="o">.</span><span class="n">colorWithRed</span><span class="p">((</span><span class="n">r</span><span class="o">.</span><span class="n">hex</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">),</span> <span class="ss">green</span><span class="p">:(</span><span class="n">g</span><span class="o">.</span><span class="n">hex</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">),</span> <span class="ss">blue</span><span class="p">:(</span><span class="n">b</span><span class="o">.</span><span class="n">hex</span><span class="o">/</span><span class="mi">255</span><span class="o">.</span><span class="mi">0</span><span class="p">),</span> <span class="ss">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StaticAppDelegate</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="ss">didFinishLaunchingWithOptions</span><span class="p">:</span><span class="n">launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="no">NSLog</span><span class="p">(</span><span class="s2">&quot;%@&quot;</span><span class="p">,</span> <span class="s2">&quot;#0c92f2&quot;</span><span class="o">.</span><span class="n">to_color</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ライブラリを作成する</h2>

<p><code>rake static</code> コマンドを実行してスタティックライブラリを作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% rake static
</span><span class='line'>     Build ./build/iPhoneSimulator-6.1-Development
</span><span class='line'>    Create ./build/iPhoneSimulator-6.1-Development/TestStatic.a
</span><span class='line'>     Build ./build/iPhoneOS-6.1-Development
</span><span class='line'>   Compile ./app/app_delegate.rb
</span><span class='line'>    Create ./build/iPhoneOS-6.1-Development/TestStatic.a
</span><span class='line'>    Create ./build/TestStatic-universal.a</span></code></pre></td></tr></table></div></figure>


<p>できあがったライブラリは <code>build</code> ディレクトリの中に <code>XXXXX-universal.a</code> という名前で格納されます。</p>

<h2>Xcode プロジェクトからライブラリを利用する</h2>

<p>先ほど作成した  <code>XXXXX-universal.a</code> に加えて、<code>libstdc++.dylib</code> と <code>libicucore.dylib</code> というライブラリをプロジェクトに追加します。</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/0/2075/ade5ed9a-3f43-5f46-e459-bff1fc64a028.png" title="130605-0001.png" alt="130605-0001.png" /></p>

<p>あと、RubyMotion で用意したメソッドを呼び出そうとすると、「メソッドの宣言がされていない！」と ARC がオンになっていると怒られてしまうので、とりあえず ARC はオフにしています。(Ruby で用意したメソッドにそったヘッダファイルを作成すれば良いのですが・・・、面倒だったので省いています)</p>

<p>次に <code>main.m</code> をに以下のようにコードを追加します。<code>RubyMotionInit()</code> を呼び出すと、RubyMotion で用意したコードの初期処理が行われ、クラスなどが構築され Objective-C から利用できるようになります。</p>

<figure class='code'><figcaption><span>main.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>      <span class="c1">// RubyMotion のライブラリを初期処理</span>
</span><span class='line'>      <span class="kt">void</span> <span class="nf">RubyMotionInit</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">);</span>
</span><span class='line'>      <span class="n">RubyMotionInit</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nf">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="n">class</span><span class="p">]));</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは Objective-C から利用します。</p>

<figure class='code'><figcaption><span>AppDelegate.m </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s">@&quot;#0c92f2&quot;</span> <span class="n">to_color</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行すると、以下のようにアウトプットコンソールに表示され、RubyMotion で作ったスタティックライブラリが動作していることが確認できます。</p>

<p><img src="https://qiita-image-store.s3.amazonaws.com/0/2075/032a7994-e99b-a25b-ebba-c6c0cacf8258.png" title="130605-0002.png" alt="130605-0002.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Kaigi 2013 と簡単に Objective-C を実行する方法]]></title>
    <link href="http://watson1978.github.io/blog/2013/06/03/rubymotion-kaigi-2013/"/>
    <updated>2013-06-03T10:43:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/06/03/rubymotion-kaigi-2013</id>
    <content type="html"><![CDATA[<p>Ruby Kaigi の前日、5月29日に RubyMotion Kaigi 2013 で発表をしてきました。
<img src="http://watson1978.github.io/images/blog/rubymotion_kaigi2013.jpg" alt="RubyMotion Kaigi" /></p>

<p>誰か：「英語が苦手で良く勤まっていますね？」</p>

<p>私：「何を言っているのか わからねーと思うが. おれもどうしてこーなったかわからなかった・・・。」</p>

<p>よく分からないけど、気づいたら RubyMotion を開発していたので、発表をすることになりました。</p>

<!-- more -->




<script async class="speakerdeck-embed" data-id="9f6aa220aaaa01303c9b3e7747c857c8" data-ratio="1.2994923857868" src="http://watson1978.github.io//speakerdeck.com/assets/embed.js"></script>


<p>話した内容はひととおりスライドに書いてあるので、補足的に Ruby と Objective-C のコードを組み合わせて実行しているところを説明したいと思います。</p>

<p>Objective-C のコードはベンダーライブラリとして組み込んでいるのですが、Rakefile に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">vendor_project</span><span class="p">(</span><span class="s1">&#39;vendor&#39;</span><span class="p">,</span> <span class="ss">:static</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とシンプルに設定しているだけです。あとは vendor ディレクトリに Objective-C のファイルを置くだけです。本来は Xcode のプロジェクトファイルがどこなのか、Header ファイルがどこに置かれているかなど設定する必要があるのですが、こんな裏技っぽいこともできます。</p>

<p>細かくビルド設定する必要がある場合には使えないのですが、ちょっと Objective-C で試してみたいケースで使えるのではないでしょうか？</p>

<p><a href="https://github.com/Watson1978/RubyMotionKaigi2013">https://github.com/Watson1978/RubyMotionKaigi2013</a></p>

<p>(人前で上手にしゃべれる方を本当に尊敬しますね。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion Conference 2013]]></title>
    <link href="http://watson1978.github.io/blog/2013/03/31/rubymotion-conference-2013/"/>
    <updated>2013-03-31T21:38:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/03/31/rubymotion-conference-2013</id>
    <content type="html"><![CDATA[<p><a href="http://www.rubymotion.com/conference/">RubyMotion Conference</a> に参加するため <a href="https://twitter.com/satococoa">@satococoa</a> さんとベルギーへ行ってきました。私の残念な英語力で理解できた範囲でとりとめもなく書いています。</p>

<p><img src="http://watson1978.github.io/images/blog/rubymotion_conferece2013_venue.jpg" alt="RUbyMotion Conference 会場" /></p>

<!-- more -->


<h2>1 日目</h2>

<h3>A Brave New World: Learning iOS for the Ruby Refugee : <a href="https://twitter.com/qrush">Nick Quaranto</a></h3>

<p><a href="http://basecamp.com/mobile">Basecamp</a> を作る際に、アプリの設定周りは <a href="https://github.com/qrush/motion-settings-bundle">motion-settings-bundle</a>、UI のレイアウトは <a href="https://github.com/malkomalko/motion-layouts">motion-layouts</a> と gem を作ったんだという話でした。</p>

<h3>Behaviour Driven Motion using Calabash : <a href="https://twitter.com/karlkrukow">Karl Krukow</a></h3>

<p>Karl は Calabash というテストフレームワークをメンテナンスしているんだって。</p>

<ul>
<li><a href="https://github.com/calabash/calabash-android">https://github.com/calabash/calabash-android</a></li>
<li><a href="https://github.com/calabash/calabash-ios">https://github.com/calabash/calabash-ios</a></li>
</ul>


<p>Calabash はクロスプラットフォームな BDD スタイルなテストフレームワークで、<a href="http://cukes.info/">Cucumber</a> を内部で利用しているみたいです。RubyMotion からは <a href="https://github.com/calabash/motion-calabash">motion-calabash</a> gem で Calabash を使えるようにしてあるそうです。</p>

<p>カンファレンス用にサンプルのレポジトリが公開されています。</p>

<ul>
<li><a href="https://github.com/krukow/motion-calabash-inspect2013">https://github.com/krukow/motion-calabash-inspect2013</a></li>
<li><a href="https://github.com/calabash/rubymotion-inspect">https://github.com/calabash/rubymotion-inspect</a></li>
</ul>


<p>アプリがどのように振る舞うべきなのか文章で書けるんだぜとデモをしていました。シミュレータでも動くし、デバイス上でももちろん動く。テスト中の動作をスクリーンショットで保存することもできるようで、テスト結果を HTML で保存するデモもしていました。(実行時にコマンドにオプションみたいなのを与えていたけど、README には書かれていない？)</p>

<p>Cucumber がテストフレームワークとして流行っているのかはさておき、こういったテストフレームワークが登場するのは多様性があって良いように思いました。</p>

<h3>Elevate your Intent : <a href="https://twitter.com/mattgreenrocks">Matt Green</a></h3>

<p>スライド : <a href="https://speakerdeck.com/mattgreen/elevate-your-intent">https://speakerdeck.com/mattgreen/elevate-your-intent</a></p>

<h3>Accessibility and RubyMotion : <a href="https://twitter.com/AustinSeraphin">Austin Seraphin</a></h3>

<p>スライド : <a href="http://www.slideshare.net/mobile/AdrianoMartino/ruby-motion-andiosaccessibility">http://www.slideshare.net/mobile/AdrianoMartino/ruby-motion-andiosaccessibility</a></p>

<p>視覚障害者にとっても使いやすいアプリを作りましょうという話でした。iOS では UIAccessibility を適切に使用すると VoiceOver 機能によって、配置されている UI の要素を読み上げてくれます。</p>

<p>RubyMotion では UI のテスト spec でアクセシビリティラベルを記述しどのボタンをタップするか指定するようになってます。元々はテストしやすいようにラベルを設定していただけなのでしょうが、これが視覚に障害のある方にとって使いやすいアプリになる一歩で素晴らしいということでした。</p>

<h3>Concurrency in RubyMotion: Use the Multicore Luke! : <a href="https://twitter.com/seanlilmateus">Mateus Armando</a></h3>

<p>スライド : <a href="https://speakerdeck.com/seanlilmateus/concurrency-patterns-in-rubymotion">https://speakerdeck.com/seanlilmateus/concurrency-patterns-in-rubymotion</a></p>

<p>RubyMotion がリリースされる前から MacRuby でいろいろ遊んでいる彼は、GCD と NSOperationQueue を用途に応じて使い分けているようでした。</p>

<h2>2 日目</h2>

<h3>More Than You Need to Know About CocoaPods : <a href="https://twitter.com/alloy">Eloy Durán</a></h3>

<p>CocoaPods で扱っているライブラリが 1200 個を超えたそうです。今度はライブラリのドキュメントを改善するために <a href="http://cocoadocs.org/">CocoaDocs.org</a> というものを立ち上げているそうです。ライブラリのドキュメントを AppleDoc 形式で出力して、Xcode から参照できるようになるそうです。</p>

<p>Future として</p>

<ul>
<li>Improve command-line interface</li>
<li>Support multiple targets</li>
<li>Support different configurations</li>
<li>Translate API documentation for RubyMotion</li>
</ul>


<p>とのことでした。</p>

<h3>Goodbye IB, Hello Teacup : <a href="https://twitter.com/colinta">Colin T.A. Gray</a></h3>

<p><a href="https://github.com/rubymotion/teacup">teacup</a> gem の使い方をデモしてました。最後の方で Kiln というライブラリのデモもしていましたが、<del>こちらはまだ公開されていないようです。<a href="https://github.com/colinta/kiln">https://github.com/colinta/kiln</a> で公開されました。</del><a href="https://github.com/colinta/motion-xray">motion-xray</a> という名前に変更したようです。</p>

<p>Kiln を使うとデバイス上で、UI 要素がどの座標に配置されているかとか、UI の階層構造を確認できたり、配色を変更できるようになるそうです。変更内容は teacup のスタイルでエクスポートできるようです。導入もすごく簡単そうでした。</p>

<h3>Using BubbleWrap to Quickly Build RubyMotion Apps : <a href="https://twitter.com/mneorr">Marin Usalj</a></h3>

<p>スライド : <a href="https://speakerdeck.com/mneorr/bubblewrap">https://speakerdeck.com/mneorr/bubblewrap</a></p>

<h3>Cocos2D, an Easier Way : <a href="https://twitter.com/JuanKaram">Juan Karam</a></h3>

<p>スライド : <a href="https://speakerdeck.com/curveberyl/cocos2d-an-easier-way">https://speakerdeck.com/curveberyl/cocos2d-an-easier-way</a></p>

<p>Box2D ライブラリが C++ で書かれていて RubyMotion で扱えない、ガッデム！！ → <a href="https://github.com/CurveBeryl/Joybox">JoyBox</a> gem という Cocos2d + Box2D for RubyMotion なラッパーライブラリ作ったよ、という話でした。</p>

<p>デモもありましたがなかなか良さそうな感じでした。まだいろいろ足りてないところがあるらしいので、pull request ウェルカムですとのことでした。</p>

<p><a href="https://twitter.com/JuanKaram/status/319432214565761024">
<img src="http://watson1978.github.io/images/blog/rubymotion_conferece2013_joybox.png" alt="JoyBox デモアプリ" />
</a></p>

<p>カンファレンスでデモしていた <a href="http://t.co/fLF5A7zROW">JoyBox のデモアプリ</a> が公開されています。</p>

<h3>RubyMotion: Past, Present and Future : <a href="https://twitter.com/lrz">Laurent Sansonetti</a></h3>

<p>RubyMotion を作る前は何をしていたかとか、今後のロードマップみたいなことを言ってました。以前に何してたのかはインタビュー記事とかにあった内容でした。</p>

<p>Future</p>

<ul>
<li>メンバーは今4人だけど、近々1人増えるそうだよ</li>
<li>RubyMotion のツールチェインを改善したい</li>
<li>コード生成 : モデルのテンプレートを出力とか。</li>
<li>Profiler</li>
<li>static code analyzer : 実行してから Typo でエラーになってがっかりするからね。</li>
<li>More platforms</li>
</ul>


<p>来年のカンファレンスをどこでする？暖かいとこ？寒いとこ？って話がありました。</p>

<hr />

<p>ベルギーは道案内の看板とか日本みたいには特になく、あったとしてもフランス語ばかりで一人で行っていたら確実に迷っていたと思います・・・。ビールはもちろん食べ物も全然おいしかったです。</p>

<p>現地で日本からの 2 名の参加者に会うことができました。コンシューマ向けのゲーム機が登場する前、パソコンでしかゲームができなかった頃から 20 年くらいゲーム業界に携わっていてるそうです。酒の席でしか聞けないようなオフレコな話しがたくさんあるようで楽しかったです。FF9 の開発に参加してたとか、昔はゲームの前に OS を作るとこからやってたので、今は恵まれているそうです。横浜から来たそうで、勉強会とか来てくださいよと宣伝しておきました。</p>

<p>私の英語力ではしんどいなぁというのが全体的なところでした。次までにはどうにかしたいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jenkins-rubymotion-plugin ってものを作ってます]]></title>
    <link href="http://watson1978.github.io/blog/2013/02/12/rubymotion-build-plugin-for-jenkins/"/>
    <updated>2013-02-12T21:34:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/02/12/rubymotion-build-plugin-for-jenkins</id>
    <content type="html"><![CDATA[<p>以前、<a href="http://watson1978.github.com/blog/2012/12/07/jenkins/">RubyMotion アプリを Jenkins でテスト実行してみよう</a> や <a href="http://watson1978.github.com/blog/2013/01/30/rubymotion-jenkins-tap/">Jenkins に TAP Plugin というものを導入しました</a> で RubyMotion アプリを Jenkins を使ってテストする方法について書きました。</p>

<p>今回はプラグインを作ってみたよってお話です。</p>

<!-- more -->


<p><img src="http://watson1978.github.io/images/blog/jenkins/jenkins.jpg" alt="jenkins" /></p>

<p>RubyMotion に日々変更を加えており、既存のライブラリに影響がないか確認するために Jenkins にいろいろメジャーなものを登録してテストしています。</p>

<p>さすがにライブラリの数が多くなってきて、どうにかもう少し簡単にそれらを Jenkins に登録できないかなぁと思っていたところ、<a href="http://www.hsbt.org/diary/20120604.html">jenkins-rbenv-plugin というプラグインを作り始めた</a> を読んで、結構簡単にプラグインを作れるのかなと錯覚して作り始めました。</p>

<ul>
<li><a href="https://github.com/Watson1978/jenkins-rubymotion-plugin">https://github.com/Watson1978/jenkins-rubymotion-plugin</a></li>
</ul>


<p><a href="http://jruby.org/">JRuby</a> と <a href="https://github.com/jenkinsci/jenkins.rb">jenkins.rb</a> というものを使って作っています。JRuby な方角に足を向けて寝ることができません。</p>

<p>プラグインのビュー画面でデバイスやテスト結果の出力形式などをリストで選択できるようにしたかったのですが、どうにもうまくいっていません。jenkins.rb 風に記述しようとすると例外がでてしまい XML を直に書いたのですが、どうもその記述が良くないようです。</p>

<p>設定内容を変更しようとするとリスト状態を保存してくれていないので、いちいちリストを選択し直さないといけない・・・。</p>

<p>と、まだまだ試行錯誤しながら作っている状態ですが、Jenkins を導入しやすくなっているかとは思います。</p>

<p>興味を持たれた方は、ぜひ使ってみて pull request をお願いします〜！ :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東京 Ruby 会議 10 3日目にいってきました]]></title>
    <link href="http://watson1978.github.io/blog/2013/02/11/tokyo-rubykaigi-3rd/"/>
    <updated>2013-02-11T13:51:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/02/11/tokyo-rubykaigi-3rd</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/satococoa">@satococoa</a> さんが RubyMotion について話されるというので行ってきましたよ、東京 Ruby 会議 10 の 3 日目に。</p>

<!-- more -->


<p>@satococoa さんが発表の前に壇上からアンケートをとっていたので興味深く拝見しました。</p>

<ul>
<li>RubyMotion の認知度は 8 &ndash; 9 割くらい。<a href="https://twitter.com/satococoa">@satococoa</a> さんや <a href="https://twitter.com/naoya_ito">@naoya_ito</a> さんの宣伝のおかげですね。ありがとうございます。</li>
<li>購入した方は、ぱっと見て居ないんじゃないかと言うくらい・・・。</li>
</ul>


<p>UITableView を実装した RubyMotion アプリ上に、<a href="https://github.com/rubymotion/BubbleWrap">BubbleWrap</a> という gem を使用して rails サーバからデータを取得し表示するというものを、一からライブコーディングされていました (rails サーバ側は事前に用意されてました)。</p>

<p>15 分という持ち時間でちゃんと動くものになっていたのは圧巻で、観衆のみなさんの受けはとても良かったように思います。発表資料やアプリのコードは <a href="http://satococoa.github.com/blog/2013/02/11/tkrk10-3rd-day/">東京 Ruby 会議 10 3日目に参加しました</a> で参照できます。</p>

<p>発表前に RubyFriendsCamera というアプリを試されていた風景。</p>

<p><img src="http://farm9.staticflickr.com/8096/8462804169_48935f12fc_z.jpg" alt="RubyFriends" /></p>

<p>From <a href="http://www.flickr.com/photos/igaiga/sets/72157632741076174/">http://www.flickr.com/photos/igaiga/sets/72157632741076174/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins に TAP Plugin というものを導入しました]]></title>
    <link href="http://watson1978.github.io/blog/2013/01/30/rubymotion-jenkins-tap/"/>
    <updated>2013-01-30T21:45:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/01/30/rubymotion-jenkins-tap</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/s/ref=nb_sb_noss_1?__mk_ja_JP=%83J%83%5E%83J%83i&amp;url=search-alias%3Daps&amp;field-keywords=mac+mini">Amazon で手頃な Mac mini</a> を購入して、<a href="http://watson1978.github.com/blog/2012/12/07/jenkins/">Jenkins で日々 RubyMotion をテスト</a>しています。</p>

<!-- more -->


<p>テスト実行結果の出力形式として <a href="http://testanything.org/wiki/index.php/Main_Page">Test Anything Protocol (TAP)</a> というものがあります。</p>

<p>RubyMotion では Spec を実行する際に <code>output</code> という環境変数で出力形式を TAP にすることができます(他にも <code>spec_dox</code>, <code>fast</code>,  <code>test_unit</code>, <code>knock</code>, <code>rubymine</code> を指定できます)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake spec output=tap</span></code></pre></td></tr></table></div></figure>


<p>Jenkins では <a href="https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin">TAP Plugin</a> というプラグインを導入すると、この TAP 形式に対応することができます。これを導入するとテスト数の増減(Faild が増えたとか)がグラフ表示されておしゃれな感じです。</p>

<p><img src="http://watson1978.github.io/images/blog/jenkins/tap.png" alt="TAP のグラフ" />
<img src="http://watson1978.github.io/images/blog/jenkins/tap2.png" alt="TAP のグラフ" /></p>

<h2>TAP Plugin の導入</h2>

<p>Jenkins のプラグイン管理画面で &ldquo;Jenkins TAP Plugin&rdquo; にチェックを入れます。</p>

<p><img src="http://watson1978.github.io/images/blog/jenkins/tap_plugin.png" alt="Jenkins TAP Plugin" /></p>

<h2>プロジェクトの設定</h2>

<p>&ldquo;Jenkins TAP Plugin&rdquo; を導入するとプロジェクトの設定画面で、ビルド後の処理に TAP Plugin に関する設定項目が追加されます。</p>

<p><img src="http://watson1978.github.io/images/blog/jenkins/tap_result.png" alt="Jenkins TAP Plugin" /></p>

<p>テスト結果をいったんファイルに保存し、そのテスト結果が書かれたファイルを TAP Plugin が読み込んで処理をするようです。</p>

<p>以下のような、Jenkins で spec を実行するためのスクリプトを用意しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;optparse&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;tempfile&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">stderr_file</span> <span class="o">=</span> <span class="no">Tempfile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;stderr&quot;</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">opt</span> <span class="o">=</span>  <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">rake</span> <span class="o">=</span> <span class="s2">&quot;rake&quot;</span>
</span><span class='line'><span class="n">output_path</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">opt</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;--bundle&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">rake</span> <span class="o">=</span> <span class="s2">&quot;bundle exec </span><span class="si">#{</span><span class="n">rake</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">opt</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;--output=filename&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">output_path</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;rm -rf </span><span class="si">#{</span><span class="n">output_path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">opt</span><span class="o">.</span><span class="n">parse!</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># run spec</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">rake</span><span class="si">}</span><span class="s2"> clean&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">rake</span><span class="si">}</span><span class="s2"> spec output=tap SIM_STDOUT_PATH=</span><span class="si">#{</span><span class="n">output_path</span><span class="si">}</span><span class="s2"> SIM_STDERR_PATH=</span><span class="si">#{</span><span class="n">stderr_file</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは、Jenkins でプロジェクト毎に以下のようなコマンドを記述して、テストを実行するようにしてます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run_spec</span> <span class="o">--</span><span class="n">bundle</span> <span class="o">--</span><span class="n">output</span><span class="o">=</span><span class="vg">$WORKSPACE</span><span class="o">/</span><span class="n">result</span><span class="o">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://watson1978.github.io/images/blog/jenkins/shell_command2.png" alt="Jenkins shell command" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[motion-pixate-observer という gem を作りました]]></title>
    <link href="http://watson1978.github.io/blog/2013/01/25/motion-pixate-observer/"/>
    <updated>2013-01-25T00:48:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/01/25/motion-pixate-observer</id>
    <content type="html"><![CDATA[<p>いやー、<a href="http://www.pixate.com/">Pixate</a> は素晴らしいですね。CSS でデザインできることがこんなに楽だったのかと改めて痛感しております。</p>

<p>ただ使っているうちに CSS を変更するたびに <code>rake</code> を実行し rebuild してデザインを確認するのが面倒くさい、もっと楽にならんのかと欲がでてきてしまいました。</p>

<!-- more -->


<p>最初は <a href="https://gist.github.com/4573005">https://gist.github.com/4573005</a> で、</p>

<ol>
<li>HTTP サーバに CSS ファイルを置いて更新用のボタンなど押す</li>
<li>HTTP サーバ から CSS をダウンロードしてデザインを更新</li>
</ol>


<p>というフローでやっていたのですが、サーバが決め打ちで柔軟性を持たせようとすると iOS アプリ側でサーバのアドレスを変更できるようにしないといけなくて面倒、さらに更新用のボタンを押すことすら面倒かもと、面倒なことが多すぎ！！</p>

<p>ということで、RubyMotion もくもく会で <a href="https://github.com/Watson1978/motion-pixate-observer">motion-pixate-observer</a> という gem を作ってみました。</p>

<ol>
<li>iOS 側から Bonjour を使ってサーバを探し、CSS を受信するようになります。</li>
<li>サーバ側は、更新している CSS を監視し更新されたらその都度 iOS 側に送信します。</li>
<li>iOS 側で CSS を受信したらデザインを更新します。</li>
</ol>


<p>という感じで、CSS ファイルを変更したら即座に反映される感じで動作します。</p>

<p>gem を組み込んだ後は、何も設定がいらないお手軽仕様となっております。アプリを iOS デバイスに転送したあとでも動作するので、RubyMotion もくもく会でデモをしたらものすごく受けが良かったです。</p>

<p>アプリの実装とデザインが分業で行われているようなところでは、実機に転送したものとサーバを渡してデザインしてもらえばよいので、お財布に優しいかもしれません。</p>

<p>(gem を公開した後で、Pixate の方から「私たちも同じような仕組みを検討している」とメールを頂きました。)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[設定情報の管理に pit を使ってみた]]></title>
    <link href="http://watson1978.github.io/blog/2013/01/19/pit/"/>
    <updated>2013-01-19T10:50:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2013/01/19/pit</id>
    <content type="html"><![CDATA[<p>先日、<a href="http://www.pixate.com/">Pixate</a> のライセンスを購入してみました。<a href="http://www.kickstarter.com/projects/pixate/beautiful-native-mobile-apps">kickstarter</a> でデモ動画がアップされたときには、「これだ！」とか意味不明に感動した覚えがあります。</p>

<p>Pixate からユーザ名やライセンスキーがメールで送られてきたのですが、これをプロジェクトを作成するたびに記述するのが面倒、というか GitHub にアップロードしたら悲惨なことになりそうなので、どうにか設定部分を分離したいなと。</p>

<p>自前で、yaml ファイルなどに設定情報を分離して、それを読み込むのもプロジェクトを作るたびごとだと面倒ですね。</p>

<p>ということで、pit というものを使ってみました。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install pit</span></code></pre></td></tr></table></div></figure>


<p>とターミナルでコマンドを実行して pit をインストールします。</p>

<p>使い方は <a href="http://subtech.g.hatena.ne.jp/cho45/20080102/1199257680">アカウント情報を管理するコマンド pit</a> を見ていただければ良いかと思います。</p>

<p>RubyMotion の Rakefile で、次のような感じで設定情報を読み込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="no">Pit</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;Pixate&quot;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;user&quot;</span>      <span class="o">=&gt;</span> <span class="s2">&quot;username in Pixate&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;key&quot;</span>       <span class="o">=&gt;</span> <span class="s2">&quot;keycode in Pixate&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;framework&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Pixate framework path&quot;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>初回の <code>rake</code> 実行時に vi ($EDITOR で設定されているエディタ) が起動するので、ユーザ名など記入し保存します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">username in Pixate</span>
</span><span class='line'><span class="l-Scalar-Plain">key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">keycode in Pixate</span>
</span><span class='line'><span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Pixate framework path</span>
</span></code></pre></td></tr></table></div></figure>


<p>framework を毎回 vendor ディレクトリにコピーしたりするのも面倒なので、適当な場所に配置してそれを直接使うようにしました。</p>

<p>あとは、下のように読み込んだ設定情報を利用するだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Use `rake config&#39; to see complete project settings.</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">pixate</span><span class="o">.</span><span class="n">user</span>      <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">pixate</span><span class="o">.</span><span class="n">key</span>       <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;key&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">app</span><span class="o">.</span><span class="n">pixate</span><span class="o">.</span><span class="n">framework</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;framework&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>pit を使うと設定情報が ~/.pit に保存されるので git でプロジェクトを管理するときなど都合が良さそうな感じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion の class について]]></title>
    <link href="http://watson1978.github.io/blog/2012/12/20/rubymotion-class/"/>
    <updated>2012-12-20T17:01:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/12/20/rubymotion-class</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/18">RubyMotion Advent Calendar 2012</a> の 20 日目の記事です。</p>

<p>どのような記事を書こうかずいぶん悩んでいたのですが、<a href="http://watson1978.github.com/blog/2012/07/22/meet-up-rubymotionjp/">第一回 RubyMotion 勉強会</a> の資料からクラスの部分を抜き出して手直ししようと言う手抜きぶりです。</p>

<!-- more -->


<h2>RubyMotion はすべて Objective-C のクラス</h2>

<p>CRuby ではルートクラスとして Object というクラスが存在します(Ruby 1.9 からだと BasicObject というのもありますが)。これに対して Objective-C では NSObject というクラスがルートクラスとして存在しています。似たようなクラスがお互いにルートクラスに存在していますね。</p>

<p>RubyMotion では NSObject を Ruby の Object として利用し、ほかのルビーのクラスを構築しています。RubyMotion の REPL で簡単に確認することができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(main)&gt; Object.new
</span><span class='line'>=&gt; #&lt;NSObject:0x937e410&gt;</span></code></pre></td></tr></table></div></figure>


<p>NSObject をベースとしてクラスを構築しているため、すべてのオブジェクトは何らかの Objective-C のメソッドを持っています。</p>

<p>Objective-C の performSelector で、 Ruby の to_s というメソッドを実行してみました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(main)&gt; Object.new.performSelector("to_s")
</span><span class='line'>=&gt; "#&lt;NSObject:0xe13efc0&gt;"</span></code></pre></td></tr></table></div></figure>


<p>(ちなみに Objective-C ではセレクタを指定する際 <code>@selector(to_s)</code> のように指定しますが、RubyMotion では単に文字列を渡すだけで良いようになっています)</p>

<h2>String/Array/Hash/Numeric/Time</h2>

<p>Ruby の String, Array, Hash, Numeric, Time クラスと同様のクラスが Objective-C でも存在しています。RubyMotion では Objective-C のクラスを継承する形でそれらのクラスが作られています。</p>

<table class="table">
<tr><th>クラス</th><th>クラスの継承関係</th></tr>
<tr><td>String</td><td>String → NSMutableString → NSString → NSObject</td></tr>
<tr><td>Array</td><td>Array → NSMutableArray → NSArray → NSObject</td></tr>
<tr><td>Hash</td><td>Hash → NSMutableDictionary → NSDictionary → NSObject</td></tr>
<tr><td>Numeric</td><td>Numeric → NSNumber → NSValue → NSObject </td></tr>
<tr><td>Time</td><td>Time → NSDate → NSObject</td></tr>
</table>


<p>この継承関係のおかげで、Ruby の Time として作ったオブジェクトでも、NSDate のメソッドを使うことができたりします。</p>

<p>Objective-C で書かれたプログラムに Time オブジェクトを渡しても NSDate として振る舞ってくれるので Objective-C にとっても都合が良いということですね。私たちにとってはオブジェクトを変換する手間が不要で嬉しい！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ruby メソッドでオブジェクトを作成
</span><span class='line'>(main)&gt; time = Time.now
</span><span class='line'>
</span><span class='line'># Objective-C メソッドを使う
</span><span class='line'>(main)&gt; time.timeIntervalSince1970
</span><span class='line'>=&gt; 1355993088.0</span></code></pre></td></tr></table></div></figure>


<p>親のクラスである NSString, NSArray, NSDictionary, NSNumber, NSDate には互換性のために Ruby メソッドが追加されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Objective-C メソッドでオブジェクトを作成
</span><span class='line'>(main)&gt; dateFormatter = NSDateFormatter.alloc.init
</span><span class='line'>(main)&gt; dateFormatter.setDateFormat("yyyy-MM-dd'T'HH:mm:ss+09:00")
</span><span class='line'>(main)&gt; date = dateFormatter.dateFromString("2012-12-15T11:43:09+09:00")
</span><span class='line'>
</span><span class='line'># Ruby メソッドを使う
</span><span class='line'>(main)&gt; date.strftime("%Y")
</span><span class='line'>=&gt; "2012"</span></code></pre></td></tr></table></div></figure>


<p>というように、 どのメソッドで作られたか、どのメソッドを呼び出すのか意識しなくても Ruby が書けるようになっています。</p>

<h2>オープンクラスでメソッドを追加する場合は上位クラスに</h2>

<p>メソッドを使うぶんには、Ruby なのか Objective-C なのか意識しなくても良いようになっていますが、オープンクラスでメソッドを追加するときだけは少し注意してください。</p>

<p>オープンクラスで String に何かメソッドを追加した場合ですが、そのメソッドは継承元の NSString のメソッドで作られたオブジェクトからは利用することができません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(main)&gt; class String
</span><span class='line'>(main)&gt;   def foo
</span><span class='line'>(main)&gt;   end
</span><span class='line'>(main)&gt; end
</span><span class='line'>
</span><span class='line'>(main)&gt; str = NSString.stringWithString("abc")
</span><span class='line'>
</span><span class='line'>(main)&gt; str.foo
</span><span class='line'>2012-12-20 18:10:04.523 test[3295:c07] undefined method `foo' for "abc":String (NoMethodError)
</span><span class='line'>test(3295,0xac2ada28) malloc: *** error for object 0xa896f30: pointer being freed was not allocated
</span><span class='line'>*** set a breakpoint in malloc_error_break to debug
</span><span class='line'>=&gt; #&lt;NoMethodError: undefined method `foo' for "abc":String&gt;</span></code></pre></td></tr></table></div></figure>


<p>オープンクラスでメソッドを追加する場合は上位の NSString や NSArray に追加するとハマることが少なくなるかと思います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(main)&gt; class NSString
</span><span class='line'>(main)&gt;   def hello
</span><span class='line'>(main)&gt;     "hello"
</span><span class='line'>(main)&gt;   end
</span><span class='line'>(main)&gt; end
</span><span class='line'>
</span><span class='line'>(main)&gt; str = NSString.stringWithString("abc")
</span><span class='line'>(main)&gt; str.hello
</span><span class='line'>=&gt; "hello"
</span><span class='line'>
</span><span class='line'>(main)&gt; "abc".hello
</span><span class='line'>=&gt; "hello"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion でビルドする CPU アーキテクチャを指定する]]></title>
    <link href="http://watson1978.github.io/blog/2012/12/15/target-cpu-archs/"/>
    <updated>2012-12-15T11:08:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/12/15/target-cpu-archs</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/18">RubyMotion Advent Calendar 2012</a> の 15 日目の記事です。</p>

<p>今回はRubyMotion でビルドする際に CPU アーキテクチャを指定する方法について書きます。</p>

<!-- more -->


<h2>iOS SDK がサポートする CPU アーキテクチャ</h2>

<p> iOS SDK がサポートする CPU アーキテクチャは以下の表のようになっています。</p>

<table class="table">
<tr><th>iOS SDK バージョン</th><th>サポート CPU アーキテクチャ</th></tr>
<tr><td>iOS 4.3</td><td>armv6, armv7</td></tr>
<tr><td>iOS 5.0</td><td>armv7</td></tr>
<tr><td>iOS 5.1</td><td>armv7</td></tr>
<tr><td>iOS 6.0</td><td>armv7, armv7s</td></tr>
</table>


<p>RubyMotion では iOS SDK がサポートしている CPU アーキテクチャにあわせてビルドが行われます。ビルド対象を iOS 6.0 にすると armv7 と armv7s を対象にビルドが行われます。</p>

<p>たいていは問題がないのですが、サードパーティのライブラリを使うときに気をつけてください。</p>

<p>armv7 しかサポートしていないサードパーティのライブラリを使うとき、デバイス向けにビルドを行うとリンクエラーとなります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake build:device
</span><span class='line'>     Build ./build/iPhoneOS-6.0-Development
</span><span class='line'>     Build vendor/GoogleMaps.framework
</span><span class='line'>   Compile ./app/app_delegate.rb
</span><span class='line'>    Create ./build/iPhoneOS-6.0-Development/HelloGMaps.app
</span><span class='line'>      Link ./build/iPhoneOS-6.0-Development/HelloGMaps.app/HelloGMaps
</span><span class='line'>
</span><span class='line'>ld: ld: file is universal (2 slices) but does not contain a(n) armv7s slice: /Users/watson/Documents/workspace/HelloGMaps/vendor/GoogleMaps.framework/GoogleMaps for architecture armv7s
</span><span class='line'>clang: error: linker command failed with exit code 1 (use -v to see invocation)</span></code></pre></td></tr></table></div></figure>


<h2>CPU アーキテクチャを指定する</h2>

<p><code>Rakefile</code> で <code>app.archs['iPhoneOS']</code> を設定するとビルドするデバイスの CPU アーキテクチャを指定することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Motion</span><span class="p">:</span><span class="ss">:Project</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>   <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>   <span class="n">app</span><span class="o">.</span><span class="n">archs</span><span class="o">[</span><span class="s1">&#39;iPhoneOS&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;armv7&#39;</span><span class="o">]</span>
</span><span class='line'>   <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで armv7 だけを対象にデバイス向けにビルドすることができます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion の autorelease_pool の使い方]]></title>
    <link href="http://watson1978.github.io/blog/2012/12/10/autorelease-pool/"/>
    <updated>2012-12-10T17:15:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/12/10/autorelease-pool</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/18">RubyMotion Advent Calendar 2012</a> の 10 日目の記事です。</p>

<p>つい最近ようやく <a href="http://www.rubymotion.com/developer-center/api/index.html">RubyMotion API Reference</a> が公開されましたが、みなさん見ていただけたでしょうか？RubyMotion のバグを取っていて、「このメソッド初めて見るんだけど何もの？」「ドキュメントが必要だよねぇ」みたいなやりとりをしながら、一生懸命リファレンスを作りました。</p>

<p>今回は <a href="http://www.rubymotion.com/developer-center/api/NSObject.html#autorelease_pool-class_method">autorelease_pool</a> の使い方について書きます。</p>

<!-- more -->


<h2>メモリサイクル</h2>

<p>iOS では、ボタンをタップなどするとイベントが発生します。イベントの開始時に自動的にメモリプールを生成し、イベント終了時にプールをリリースします。このときメモリプールに登録されている不要になったオブジェクトが一緒にリリースされます。</p>

<p>RubyMotion で作られたアプリも、これに従って不要になったオブジェクトが破棄されていきます。</p>

<p>たとえば、イベント処理中に以下のような大量の一時的なオブジェクトを作成してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">100000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;abc&quot;</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>    <span class="p">{</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instruments.app でメモリ使用を確認すると、以下のようになります。</p>

<p><img src="http://watson1978.github.io/images/blog/autorelease_pool_1.png" alt="autorelease_pool なし" /></p>

<p>イベントが終了するまで一時的なオブジェクトは生存していて、イベント終了とともに破棄されている様子がわかります。</p>

<p>最近の iOS デバイスはメモリを 512 MB 以上搭載していますが、どうしてもメモリの使用量を抑えながら処理をしたい場合があるかと思います。</p>

<h2>autorelease_pool を使ってみよう</h2>

<p>上のコードを次のように変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">100000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">autorelease_pool</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;abc&quot;</span>
</span><span class='line'>      <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>      <span class="p">{</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>autorelease_pool</code> のブロックで囲むようにしただけです。Objective-C の <code>@autorelease</code> ブロックと同じようですね。</p>

<p>Instruments.app でメモリ使用を確認してみます。</p>

<p><img src="http://watson1978.github.io/images/blog/autorelease_pool_2.png" alt="autorelease_pool なし" /></p>

<p>今回は一定のメモリ使用率をキープしていることが分かります。<code>autorelease_pool</code> ブロックの処理が終わると、ブロック内で使用した不要なオブジェクトが破棄されていることが分かるかと思います。</p>

<p><code>autorelease_pool</code> を使うとメモリ使用量を抑えることができますが、メモリプールの生成とリリースがそのたびに行われるのでそのぶん処理時間が延びます。まだ作りこみが足りてないようで、<code>autorelease_pool</code> で破棄されているオブジェクトにアクセスするとクラッシュするのでご注意ください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[短いメソッドは grep で探すの大変ですよね]]></title>
    <link href="http://watson1978.github.io/blog/2012/12/09/find-methods/"/>
    <updated>2012-12-09T12:25:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/12/09/find-methods</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/18">RubyMotion Advent Calendar 2012</a> の 9 日目の記事です。</p>

<p>タイトルそのままなのですが、短いメソッドなどを探すのって大変ですよね。デバッグのために仕込んだ <code>p</code> メソッドを取り外そうと検索すると、いろいろなものに紛れ込んでしまいますよね。</p>

<!-- more -->


<h2>grep で検索すると・・・</h2>

<p>grep で検索するといろいろなノイズに紛れ込んでしまいます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ grep "p" -r **/*.rb
</span><span class='line'>app/app_delegate.rb:1:class AppDelegate
</span><span class='line'>app/app_delegate.rb:2:  def application(application, didFinishLaunchingWithOptions:launchOptions)
</span><span class='line'>app/controllers/camera_controller.rb:4:    super
</span><span class='line'>app/controllers/camera_controller.rb:8:    @library = UIButton.buttonWithType(UIButtonTypeRoundedRect)
</span><span class='line'>app/controllers/camera_controller.rb:11:    @library.when UIControlEventTouchUpInside do
</span><span class='line'>app/controllers/camera_controller.rb:12:      BW::Device.camera.any.picture(media_types: [:image]) do |result|
</span><span class='line'>app/controllers/camera_controller.rb:21:      @front = UIButton.buttonWithType(UIButtonTypeRoundedRect)
</span><span class='line'>app/controllers/camera_controller.rb:26:      @front.when UIControlEventTouchUpInside do
</span><span class='line'>app/controllers/camera_controller.rb:27:        BW::Device.camera.front.picture(media_types: [:image]) do |result|
</span><span class='line'>app/controllers/camera_controller.rb:33:      p @front
</span><span class='line'>app/controllers/camera_controller.rb:38:      @rear = UIButton.buttonWithType(UIButtonTypeRoundedRect)
</span><span class='line'>app/controllers/camera_controller.rb:43:      @rear.when UIControlEventTouchUpInside do
</span><span class='line'>app/controllers/camera_controller.rb:44:        BW::Device.camera.rear.picture(media_types: [:image]) do |result|
</span><span class='line'>spec/main_spec.rb:1:describe "Application 'google_location'" do
</span><span class='line'>spec/main_spec.rb:3:    @app = UIApplication.sharedApplication
</span><span class='line'>spec/main_spec.rb:7:    @app.windows.size.should == 1</span></code></pre></td></tr></table></div></figure>


<h2>検索するツールを作りました</h2>

<figure class='code'><figcaption><span>rbfind </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env macruby</span>
</span><span class='line'><span class="c1"># -*- coding: UTF-8 -*-</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ripper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Discovery</span> <span class="o">&lt;</span> <span class="ss">Ripper</span><span class="p">:</span><span class="ss">:SexpBuilder</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">find_name</span><span class="p">,</span> <span class="n">matcher</span> <span class="o">=</span> <span class="ss">:==</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@path</span>      <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>    <span class="vi">@find_name</span> <span class="o">=</span> <span class="n">find_name</span>
</span><span class='line'>    <span class="n">source</span>     <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@lines</span>     <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>    <span class="vi">@matcher</span>   <span class="o">=</span> <span class="n">matcher</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">SCANNER_EVENTS</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;on_</span><span class="si">#{</span><span class="n">event</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">token</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">token</span> <span class="o">&amp;&amp;</span> <span class="n">token</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="vi">@matcher</span><span class="p">,</span> <span class="vi">@find_name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">lineno</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@path</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">line</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="vi">@lines</span><span class="o">[</span><span class="n">line</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="vg">$0</span> <span class="o">==</span> <span class="bp">__FILE__</span>
</span><span class='line'>  <span class="n">find_name</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="n">files</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;**/*.rb&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">delete_if</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="vg">$0</span><span class="p">}</span>
</span><span class='line'>  <span class="n">files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Discovery</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">find_name</span><span class="p">)</span><span class="o">.</span><span class="n">parse</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>RubyMotion はキーワード付き引数をサポートしているため、それを扱える MacRuby か Ruby 2.0 で実行してください。(CRuby 向けのコードでしたら、Ruby 1.9 でも動作するはずです)</p>

<p>Rubyのソースコードをトークン単位で検索します。実行すると、以下のような感じになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbfind p           
</span><span class='line'>app/controllers/camera_controller.rb:33:      p @front</span></code></pre></td></tr></table></div></figure>


<p>完全に一致した場合に表示しているので、インスタンス変数を調べるときには <code>@front</code> のように ワードを指定します。</p>

<p>短いメソッドなどを探すのが楽になるかなと思っていますが、いかがでしたでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion アプリを Jenkins でテスト実行してみよう]]></title>
    <link href="http://watson1978.github.io/blog/2012/12/07/jenkins/"/>
    <updated>2012-12-07T00:00:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/12/07/jenkins</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/18">RubyMotion Advent Calendar 2012</a> の 7 日目の記事です。</p>

<p>最近になってようやく Jenkins を使い始めてみたので、RubyMotion アプリを Jenkins でテスト実行する方法について調べてみました。</p>

<!-- more -->


<h2>Jenkins をインストール</h2>

<p>Homebrew を利用してインストールしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install jenkins</span></code></pre></td></tr></table></div></figure>


<p>以下のコマンドを実行すると Jenkins が起動します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ java -jar /usr/local/opt/jenkins/libexec/jenkins.war</span></code></pre></td></tr></table></div></figure>


<p>ログインしたときに自動的に Jenkins を起動したい場合には以下のコマンドを実行すると良いようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents
</span><span class='line'>$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist</span></code></pre></td></tr></table></div></figure>


<p>Jenkins をインストールしたマシンからのみアクセスする場合には問題がないのですが、別のマシンからもアクセスしたい場合には homebrew.mxcl.jenkins.plist を修正する必要があるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/homebrew.mxcl.jenkins.plist b/homebrew.mxcl.jenkins.plist</span>
</span><span class='line'><span class="gh">index 294b857..e4b892e 100644</span>
</span><span class='line'><span class="gd">--- a/homebrew.mxcl.jenkins.plist</span>
</span><span class='line'><span class="gi">+++ b/homebrew.mxcl.jenkins.plist</span>
</span><span class='line'><span class="gu">@@ -9,7 +9,6 @@</span>
</span><span class='line'>       &lt;string&gt;/usr/bin/java&lt;/string&gt;
</span><span class='line'>       &lt;string&gt;-jar&lt;/string&gt;
</span><span class='line'>       &lt;string&gt;/usr/local/opt/jenkins/libexec/jenkins.war&lt;/string&gt;
</span><span class='line'><span class="gd">-      &lt;string&gt;--httpListenAddress=127.0.0.1&lt;/string&gt;</span>
</span><span class='line'>     &lt;/array&gt;
</span><span class='line'>     &lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>     &lt;true/&gt;
</span></code></pre></td></tr></table></div></figure>


<p><code>--httpListenAddress</code> の行をざっくりと削除しましょう。</p>

<p><a href="http://localhost:8080/">http://localhost:8080/</a> にアクセスすると、Jenkins で作業をおこなうことができます。</p>

<h2>ジョブを作成</h2>

<p>試しに <a href="https://github.com/HipByte/RubyMotionSamples">https://github.com/HipByte/RubyMotionSamples</a> の Timer アプリをテストするジョブを作ってみたいと思います。</p>

<p>とりあえず、サンプルを clone しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ mkdir work
</span><span class='line'>$ git clone git://github.com/HipByte/RubyMotionSamples.git
</span></code></pre></td></tr></table></div></figure>


<p>次に Jenkins でジョブを設定してきます。</p>

<ol>
<li><p>メニューの「新規ジョブ作成」を選択します。ここではジョブ名に「Timer」とし、「フリースタイル・プロジェクトのビルド」をチェックします。<br/>
<img src="http://watson1978.github.io/images/blog/jenkins/create_new_job.png" alt="新規ジョブ作成" /></p></li>
<li><p>「プロジェクトの高度なオプション」でカスタムワークスペースを設定します。先ほど <code>git clone</code> したプロジェクトのパスを設定します。私の環境では <code>/Users/watson/work/RubyMotionSamples/Timer</code> というパスになります。<br/>
<img src="http://watson1978.github.io/images/blog/jenkins/custom_workspace.png" alt="カスタムワークスペースの設定" /></p></li>
<li><p>「ビルド」で「シェルの実行」を選択し、<code>rake spec</code> を実行します。
<img src="http://watson1978.github.io/images/blog/jenkins/shell_command.png" alt="シェルスクリプト" /></p></li>
</ol>


<h2>ビルド実行</h2>

<p>先ほど作成したジョブを実行してみます。メニューから「ビルド実行」を選択します。
ビルドした結果のコンソール出力を見てみましょう。</p>

<p><img src="http://watson1978.github.io/images/blog/jenkins/consol_log.png" alt="コンソール出力" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+ rake spec</span>
</span><span class='line'>...
</span><span class='line'>[1m  Simulate[0m ./build/iPhoneSimulator-6.0-Development/Timer_spec.app
</span><span class='line'>*** stdout unavailable, output disabled
</span><span class='line'>*** stderr unavailable, output disabled
</span><span class='line'>Finished: SUCCESS
</span></code></pre></td></tr></table></div></figure>


<p><code>SUCCESS</code> で終了しているのに、<code>*** stdout unavailable, output disabled</code> と結果が出力されません。</p>

<h2>実行するスクリプトの修正</h2>

<p>RubyMotion 1.28 で環境変数 <code>SIM_STDOUT_PATH</code>、<code>SIM_STDERR_PATH</code> を設定すると標準出力と標準エラーの結果を指定したパスに保存されるようになったので、これを使ってみます。</p>

<p>ジョブに設定したシェルスクリプトを以下のように変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>rake spec SIM_STDOUT_PATH=/tmp/jenkins_output SIM_STDERR_PATH=/tmp/jenkins_error
</span><span class='line'>cat /tmp/jenkins_output
</span></code></pre></td></tr></table></div></figure>


<p>ジョブを実行すると、コンソール出力が次のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gi">+ rake spec SIM_STDOUT_PATH=/tmp/jenkins_output SIM_STDERR_PATH=/tmp/jenkins_error</span>
</span><span class='line'>[1m     Build[0m ./build/iPhoneSimulator-6.0-Development
</span><span class='line'>[1m  Simulate[0m ./build/iPhoneSimulator-6.0-Development/Timer_spec.app
</span><span class='line'><span class="gi">+ cat /tmp/jenkins_output</span>
</span><span class='line'>The Timer view controller
</span><span class='line'>  - has a timer label
</span><span class='line'>  - starts a timer
</span><span class='line'>  - increases the timer label value
</span><span class='line'>  - resets the timer on each run
</span><span class='line'>
</span><span class='line'>4 specifications (6 requirements), 0 failures, 0 errors
</span><span class='line'>Finished: SUCCESS
</span></code></pre></td></tr></table></div></figure>


<p>ずいぶん良くなりました。</p>

<p>Jenkins はスクリプトの終了コードを見て、成功なのか失敗なのかを判断しているようです。テストがすべて成功したときだけ SUCCESS としてほしいところです。そこで次の <code>run_spec</code> というファイルを作成してパスが通っているところに配置し、Jenkins で実行するようにしました。</p>

<figure class='code'><figcaption><span>run_spec </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;fileutils&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;tempfile&quot;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">FileUtils</span>
</span><span class='line'>
</span><span class='line'><span class="n">stdout</span>  <span class="o">=</span> <span class="no">Tempfile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;stdout&quot;</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="n">stderr</span>  <span class="o">=</span> <span class="no">Tempfile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;stderr&quot;</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># run spec</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;rake clean&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;rake spec SIM_STDOUT_PATH=</span><span class="si">#{</span><span class="n">stdout</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2"> SIM_STDERR_PATH=</span><span class="si">#{</span><span class="n">stderr</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># print result</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">stdout</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'><span class="n">match</span>  <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">lines</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(\d+) failures, (\d+) errors$/</span><span class="p">)</span>
</span><span class='line'><span class="n">failures</span> <span class="o">=</span> <span class="n">match</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'><span class="n">errors</span>   <span class="o">=</span> <span class="n">match</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'><span class="k">if</span> <span class="n">failures</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">errors</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jenkins の「シェルの実行」には <code>run_spec</code> とだけ記述すれば OK です。これでテストに失敗したときには Jenkins のステータスが赤く表示されるので分かりやすくなりました。</p>

<p>記事を書くまでに設定したのはここまでです。あとは定期的にテストを実行したり、テスト結果をメールで送信したりなどするとより良くなるのではないでしょうか。</p>

<p>Jenkins を使い始めたばかりでわからないことばかりなので、便利な使い方などありましたらお知らせください〜。</p>

<h2>まとめ</h2>

<p>Jenkins で RubyMotion アプリを実行するときには、環境変数 <code>SIM_STDOUT_PATH</code> と <code>SIM_STDERR_PATH</code> を使いましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxy サーバを用意して HTTP 通信をテストしよう]]></title>
    <link href="http://watson1978.github.io/blog/2012/12/04/proxy-server-for-HTTP-test/"/>
    <updated>2012-12-04T00:00:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/12/04/proxy-server-for-HTTP-test</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/18">RubyMotion Advent Calendar 2012</a> の 4 日目の記事です。</p>

<p>以前「RubyMotion もくもく会」で HTTP 通信のテストはどうすれば良いのだろうかという話題でモックを用意するのですかねと話が収束したのですが、面倒だし極力アプリに手を加えたくないなぁと一人もやもやしておりました。</p>

<p>Proxy サーバを用意すれば比較的簡単にテストできるんじゃないかと思い、ブログに書いてみました。</p>

<!-- more -->


<h2>きっかけは</h2>

<p>何を検索していてたどり着いたのかは忘れましたが、<a href="http://ja.favstar.fm/users/Psychs/status/3507370903">http://ja.favstar.fm/users/Psychs/status/3507370903</a> というツイートを見かけ、</p>

<p><img src="http://watson1978.github.io/images/blog/psychs_tweet_nsconnection.png" alt="Psychs 先生のツイート" /></p>

<p>さすが @Psychs 先生。神！と思った次第です。iOS シミュレータなど Cocoa API を使ったアプリの HTTP 通信は簡単に Proxy を経由するように設定できるわけですね。</p>

<h2>Proxy サーバを作る</h2>

<p>CRuby には WEBrick というライブラリが付属しています。このライブラリは HTTP サーバはもちろん Proxy サーバも作ることができます。今回はこれを使ってみます。</p>

<figure class='code'><figcaption><span>proxy.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;webrick&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;webrick/httpproxy&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">handler</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">()</span> <span class="k">do</span> <span class="o">|</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># クライアントに対してテストしたいレスポンスを返す</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="ss">WEBrick</span><span class="p">:</span><span class="ss">:HTTPProxyServer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>       <span class="ss">:BindAddress</span> <span class="o">=&gt;</span> <span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span>
</span><span class='line'>       <span class="ss">:Port</span> <span class="o">=&gt;</span> <span class="mi">8080</span><span class="p">,</span>
</span><span class='line'>       <span class="ss">:ProxyContentHandler</span> <span class="o">=&gt;</span> <span class="n">handler</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Signal</span><span class="o">.</span><span class="n">trap</span><span class="p">(</span><span class="s1">&#39;INT&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">shutdown</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の proxy.rb を実行すると 8080 ポートで Proxy サーバが起動します。</p>

<p>あとはハンドラの処理をテスト内容に応じて追加してあげると良いでしょう。たとえば画像に対しては 404 Not Found を返してあげたい場合には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">handler</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">()</span> <span class="k">do</span> <span class="o">|</span><span class="n">req</span><span class="p">,</span> <span class="n">res</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">res</span><span class="o">[</span><span class="s2">&quot;content-type&quot;</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/image/</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s2">&quot;Not Found&quot;</span>
</span><span class='line'>    <span class="n">res</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="mi">404</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>といったような処理を追加すると良いでしょう。特定の URL に対するアクセスも同じように簡単に処理できるかと思います。あるいは、sleep を追加して一定時間レスポンスを返さないテストも行えるかと思います。</p>

<h2>プロキシを設定し利用してみよう</h2>

<p>[システム環境設定] の [ネットワーク] でプロキシを設定します。</p>

<p><img src="http://watson1978.github.io/images/blog/proxy_setting_on_osx.png" alt="プロキシを設定" /></p>

<p>これで Cocoa API を使用したアプリの通信がプロキシを経由するようになります。</p>

<p>あとは、先ほど作成した <code>proxy.rb</code> を起動した状態で RubyMotion アプリを <code>rake</code> コマンドで実行するだけです。シミュレータ上での HTTP 通信もプロキシを経由するようになります。</p>

<p>プロキシサーバのログにはいろいろ出力されることでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">proxy</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="o">[</span><span class="mi">2012</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mo">02</span> <span class="mi">19</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">14</span><span class="o">]</span> <span class="no">INFO</span>  <span class="no">WEBrick</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span>
</span><span class='line'><span class="o">[</span><span class="mi">2012</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mo">02</span> <span class="mi">19</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">14</span><span class="o">]</span> <span class="no">INFO</span>  <span class="n">ruby</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span> <span class="p">(</span><span class="mi">2012</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span> <span class="o">[</span><span class="n">x86_64</span><span class="o">-</span><span class="n">darwin12</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">2012</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mo">02</span> <span class="mi">19</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">14</span><span class="o">]</span> <span class="no">INFO</span>  <span class="ss">WEBrick</span><span class="p">:</span><span class="ss">:HTTPProxyServer</span><span class="c1">#start: pid=55229 port=8080</span>
</span><span class='line'><span class="n">localhost</span> <span class="o">-</span> <span class="o">-</span> <span class="o">[</span><span class="mo">02</span><span class="o">/</span><span class="no">Dec</span><span class="o">/</span><span class="mi">2012</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">20</span> <span class="no">JST</span><span class="o">]</span> <span class="s2">&quot;GET http://gspa21.ls.apple.com/config/prod-resources-lodpi-18 HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="mi">8088</span>
</span><span class='line'><span class="o">-</span> <span class="o">-&gt;</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">gspa21</span><span class="o">.</span><span class="n">ls</span><span class="o">.</span><span class="n">apple</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">config</span><span class="o">/</span><span class="n">prod</span><span class="o">-</span><span class="n">resources</span><span class="o">-</span><span class="n">lodpi</span><span class="o">-</span><span class="mi">18</span>
</span><span class='line'><span class="n">localhost</span> <span class="o">-</span> <span class="o">-</span> <span class="o">[</span><span class="mo">02</span><span class="o">/</span><span class="no">Dec</span><span class="o">/</span><span class="mi">2012</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">19</span> <span class="no">JST</span><span class="o">]</span> <span class="s2">&quot;GET http://gsp1.apple.com/pep/gcc HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="mi">2</span>
</span><span class='line'><span class="o">-</span> <span class="o">-&gt;</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">gsp1</span><span class="o">.</span><span class="n">apple</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pep</span><span class="o">/</span><span class="n">gcc</span>
</span><span class='line'><span class="n">localhost</span> <span class="o">-</span> <span class="o">-</span> <span class="o">[</span><span class="mo">02</span><span class="o">/</span><span class="no">Dec</span><span class="o">/</span><span class="mi">2012</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">20</span> <span class="no">JST</span><span class="o">]</span> <span class="s2">&quot;GET http://gspa23.ls.apple.com/tile?style=13&amp;size=2&amp;scale=0&amp;v=46&amp;z=6&amp;x=33&amp;y=21&amp;lang=en&amp;sid=120413474228982680818307689923224195391&amp;tk=11e206b6e88472f89a46a8358fe131fe&amp;mapkey=1354448060_71cded0e981b896e87214a6be0d8e71d HTTP/1.1&quot;</span> <span class="mi">200</span> <span class="mi">1160</span>
</span><span class='line'><span class="o">-</span> <span class="o">-&gt;</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">gspa23</span><span class="o">.</span><span class="n">ls</span><span class="o">.</span><span class="n">apple</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">tile?style</span><span class="o">=</span><span class="mi">13</span><span class="o">&amp;</span><span class="n">size</span><span class="o">=</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">scale</span><span class="o">=</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">v</span><span class="o">=</span><span class="mi">46</span><span class="o">&amp;</span><span class="n">z</span><span class="o">=</span><span class="mi">6</span><span class="o">&amp;</span><span class="n">x</span><span class="o">=</span><span class="mi">33</span><span class="o">&amp;</span><span class="n">y</span><span class="o">=</span><span class="mi">21</span><span class="o">&amp;</span><span class="n">lang</span><span class="o">=</span><span class="n">en</span><span class="o">&amp;</span><span class="n">sid</span><span class="o">=</span><span class="mi">120413474228982680818307689923224195391</span><span class="o">&amp;</span><span class="n">tk</span><span class="o">=</span><span class="mi">11</span><span class="n">e206b6e88472f89a46a8358fe131fe</span><span class="o">&amp;</span><span class="n">mapkey</span><span class="o">=</span><span class="mi">1354448060_71</span><span class="n">cded0e981b896e87214a6be0d8e71d</span>
</span></code></pre></td></tr></table></div></figure>


<p>この Proxy サーバは iPhone などの実機からも利用することができます。[設定] の [Wi-Fi] からプロキシを設定してください。</p>

<p><img src="http://watson1978.github.io/images/blog/proxy_setting_on_ios.png" alt="プロキシを設定" /></p>

<p>テストが終わりましたら、プロキシの設定は元に戻してくださいね。</p>

<h2>まとめ</h2>

<p>この記事を書いてみて分かったのですが RubyMotion に関するコードが全く出てきませんでした、、、が、RubyMotion アプリのテストに限らず、iOS アプリ全般で簡単に HTTP 通信のテストができるようになるかと思います。</p>

<h2>参考</h2>

<ul>
<li><a href="http://jp.rubyist.net/magazine/?0002-WEBrickProxy">WEBrickでプロキシサーバを作って遊ぶ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion アプリで DTrace を使ってみよう]]></title>
    <link href="http://watson1978.github.io/blog/2012/12/03/dtrace/"/>
    <updated>2012-12-03T00:00:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/12/03/dtrace</id>
    <content type="html"><![CDATA[<p>この記事は <a href="http://www.adventar.org/calendars/18">RubyMotion Advent Calendar 2012</a> の 3 日目の記事です。</p>

<p>DTrace は Sun Microsystems が開発した実行中のアプリの情報を取得する仕組みです。DTrace を使用するとアプリケーションを一切変更することなく情報取得を可能にします。
Xcode に付属している Instruments が様々な情報を表示できるのは、縁の下に DTrace が存在しているからです。</p>

<p>Ruby 2.0 preview2 でいよいよ DTrace がサポートされましたが、MacRuby や RubyMotion ではすでに DTrace をサポートしています。</p>

<!-- more -->


<h2>プローブを確認してみる</h2>

<p>DTrace では、アプリに埋め込まれている「プローブ」と呼ばれる計測ポイントを用い、追跡をおこないます。</p>

<p>現在利用可能なプローブの一覧は <code>sudo dtrace -l</code> で確認することができます。シミュレータで RubyMotion アプリを実行した状態で確認してみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ motion create HelloDTrace
</span><span class='line'>$ cd HelloDTrace
</span><span class='line'>$ rake</span></code></pre></td></tr></table></div></figure>


<p>別の Terminal ウィンドウで <code>sudo dtrace -l</code> を実行してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dtrace -l
</span><span class='line'>   ID   PROVIDER            MODULE                          FUNCTION NAME
</span><span class='line'>    1     dtrace                                                     BEGIN
</span><span class='line'>    2     dtrace                                                     END
</span><span class='line'>    3     dtrace                                                     ERROR
</span><span class='line'>    4   lockstat       mach_kernel                      lck_mtx_lock adaptive-acquire
</span><span class='line'>    5   lockstat       mach_kernel                      lck_mtx_lock adaptive-spin
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>各列の説明を簡単にします。</p>

<ul>
<li><code>PROVIDER</code> は、プローブを提供しているプログラムの識別子のようなものです。</li>
<li><code>MODULE</code> は、プローブが属するカーネルモジュール名やライブラリ名が入ります。上のように、存在しない場合もあります。</li>
<li><code>FUNCTION</code> は、プローブが属するプログラムの関数名を表します。上の例のように、存在しない場合もあります。</li>
<li><code>NAME</code> は、プローブの機能を表す名前を表します。</li>
</ul>


<p>大量に表示されるプローブの一覧から RubyMotion が提供しているものを探し出すのは不可能に近いので <code>grep</code> で検索してみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dtrace -l | grep HelloDTrace
</span><span class='line'> 8037 macruby2577       HelloDTrace                    rb_vm_dispatch method-entry
</span><span class='line'> 8038 macruby2577       HelloDTrace                    rb_vm_dispatch method-return
</span><span class='line'> 8039 macruby2577       HelloDTrace   _ZL10__vm_raisev [__vm_raise()] raise</span></code></pre></td></tr></table></div></figure>


<p>RubyMotion は MacRuby と同様に <code>macruby</code> というプロバイダ名でプローブを提供しています。プローブは <code>method-entry</code>、 <code>method-return</code> と <code>raise</code> の 3 種類あることが分かります。</p>

<h2>プローブ説明</h2>

<table class="table">
<tr><th>プローブ名</th><th>実行タイミング</th><th>変数 arg0</th><th>変数 arg1</th><th>変数 arg2</th><th>変数 arg3</th></tr>
<tr><td>method-entry</td><td>メソッド呼出開始</td><td>クラス名</td><td>メソッド名</td><td>ソースファイル名</td><td>行番号</td></tr>
<td>method-return</td><td>メソッド呼出終了</td><td>クラス名</td><td>メソッド名</td><td>ソースファイル名</td><td>行番号</td></tr>
<td>raise</td><td>例外発生時</td><td>クラス名</td><td>ソースファイル名</td><td>行番号</td><td>-</td></tr>
</table>


<p><code>method-entry</code> プローブが実行されるとき、変数 arg0 にはクラス名、変数 arg1 には メソッド名が格納されています。(ソースファイル名と行番号は正しく格納されていない)</p>

<h2>とりあえず動かしてみよう</h2>

<h3>準備</h3>

<p>最初に作成した HelloDTrace アプリの <code>app/app_delegate.rb</code> を以下のように変更しておきます。</p>

<figure class='code'><figcaption><span>app/app_delegate.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hello_dtrace</span>
</span><span class='line'>  <span class="n">time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="no">UIAlertView</span><span class="o">.</span><span class="n">alloc</span><span class="o">.</span><span class="n">initWithTitle</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;Hello DTrace&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">message</span><span class="p">:</span> <span class="s2">&quot;Current time is </span><span class="si">#{</span><span class="n">time</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">delegate</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">cancelButtonTitle</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">otherButtonTitles</span><span class="p">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kp">nil</span>
</span><span class='line'>  <span class="p">)</span><span class="o">.</span><span class="n">show</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="p">,</span> <span class="ss">didFinishLaunchingWithOptions</span><span class="p">:</span><span class="n">launchOptions</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に以下のような DTrace 用のスクリプト <code>trace.d</code> を用意します。</p>

<figure class='code'><figcaption><span>trace.d </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='d'><span class='line'><span class="c1">// メソッドの開始と終了の出力をインデント (-&gt;) を付けて表示させる</span>
</span><span class='line'><span class="err">#</span><span class="k">pragma</span> <span class="n">D</span> <span class="n">option</span> <span class="n">flowindent</span>
</span><span class='line'>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="n">entry</span><span class="p">,</span>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="k">return</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* arg0 にはクラス名、 arg1 にはメソッド名が格納されています */</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;(%s#%s)&quot;</span><span class="p">,</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">),</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg1</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>実行してみよう</h3>

<p>まずは RubyMotion アプリを <code>rake</code> コマンドで起動します。</p>

<p>シミュレータが起動したところで、別の Terminal ウィンドウで起動したアプリのプロセス ID を <code>ps</code> コマンドやアクティビティモニターで調べておきます。DTrace を実行する際にこのプロセス ID を使用します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ps cux | grep HelloDTrace
</span><span class='line'>watson  5140   0.0  0.3   875476  21148   ??  S     6:04PM   0:00.31 HelloDTrace</span></code></pre></td></tr></table></div></figure>


<p>プロセス ID は 5140 でした。</p>

<p>次に DTrace を実行します。<code>dtrace</code> の後に <code>-s</code> オプションで用意した DTrace 用のスクリプト、<code>-p</code> で情報を取得するプロセスの ID を指定します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dtrace -s trace.d -p 5140</span></code></pre></td></tr></table></div></figure>


<p>マウスカーソルを移動するたびに DTrace の実行画面にトレース情報が表示されるかと思います。シミュレータ上でマウスオーバーを検出するためにマウスカーソルのイベントが発生するとやりとりしているようです。(キーボード操作だけで乗り切ると、余計なログが表示されず見やすくなります)</p>

<p>RubyMotion の REPL で <code>hello_dtrace</code> メソッドを実行してみましょう。シミュレータにはアラートビューが表示され、DTrace を実行している Terminal には以下のように DTrace を起動した後に実行されたメソッドが表示されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  0  -&gt; rb_vm_dispatch                        (TopLevel#inspect)
</span><span class='line'>  0  &lt;- rb_vm_dispatch                        (TopLevel#inspect)
</span><span class='line'>  1  -&gt; rb_vm_dispatch                        (TopLevel#hello_dtrace)
</span><span class='line'>  1    -&gt; rb_vm_dispatch                      (Class#now)
</span><span class='line'>  1      -&gt; rb_vm_dispatch                    (Class#alloc)
</span><span class='line'>  1      &lt;- rb_vm_dispatch                    (Class#alloc)
</span><span class='line'>  1      -&gt; rb_vm_dispatch                    (Time#initialize)
</span><span class='line'>  1      &lt;- rb_vm_dispatch                    (Time#initialize)
</span><span class='line'>  1    &lt;- rb_vm_dispatch                      (Class#now)
</span><span class='line'>  1    -&gt; rb_vm_dispatch                      (Time#to_s)
</span><span class='line'>  1    &lt;- rb_vm_dispatch                      (Time#to_s)
</span><span class='line'>  1    -&gt; rb_vm_dispatch                      (UIAlertView#inspect)
</span><span class='line'>  1      -&gt; rb_vm_dispatch                    (UIAlertView#to_s)
</span><span class='line'>  1      &lt;- rb_vm_dispatch                    (UIAlertView#to_s)
</span><span class='line'>  1    &lt;- rb_vm_dispatch                      (UIAlertView#inspect)
</span><span class='line'>  3  &lt;- rb_vm_dispatch                        (TopLevel#hello_dtrace)
</span><span class='line'>^C</span></code></pre></td></tr></table></div></figure>


<p>インデントの深さに応じて、メソッドがどのような順序で呼び出されているかが分かります。</p>

<p><kbd>CTRL</kbd> + <kbd>c</kbd> か RubyMotion アプリを終了させると DTrace が終了します。</p>

<h2>メソッドの実行時間を計測してみよう</h2>

<p>今度はメソッドの実行時間を計測してみよう。使用するスクリプトは以下のようになります。</p>

<figure class='code'><figcaption><span>time.d </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='d'><span class='line'><span class="err">#</span><span class="k">pragma</span> <span class="n">D</span> <span class="n">option</span> <span class="n">quiet</span>
</span><span class='line'>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="n">entry</span>
</span><span class='line'><span class="p">/</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;String&quot;</span> <span class="p">/</span>  <span class="cm">/* String クラスだけを計測する */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">-&gt;</span><span class="n">starttime</span> <span class="p">=</span> <span class="n">walltimestamp</span> <span class="p">/</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="k">return</span>
</span><span class='line'><span class="p">/</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;String&quot;</span> <span class="p">/</span>  <span class="cm">/* String クラスだけを計測する */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="n">invoked_time</span><span class="p">[</span><span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">),</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg1</span><span class="p">)]</span> <span class="p">=</span> <span class="n">sum</span><span class="p">((</span><span class="n">walltimestamp</span> <span class="p">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">-</span> <span class="n">self</span><span class="p">-&gt;</span><span class="n">starttime</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">END</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%-10s  %-15s  %s\n&quot;</span><span class="p">,</span> <span class="s">&quot;CLASS&quot;</span><span class="p">,</span> <span class="s">&quot;METHOD&quot;</span><span class="p">,</span> <span class="s">&quot;TOTAL TIME µsec&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;--------------------------------------------------------------------------------\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printa</span><span class="p">(</span><span class="s">&quot;%-10s  %-15s  %@d\n&quot;</span><span class="p">,</span> <span class="err">@</span><span class="n">invoked_time</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/ copyinstr(arg0) == "String" /</code> という記述を追加すると、変数 arg0 が &ldquo;String&rdquo; と一致するときだけ計測されるようになります。</p>

<p>DTrace で上のスクリプトを実行すると次のように、String クラスのメソッドの実行時間の合計が表示されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CLASS       METHOD           TOTAL TIME µsec
</span><span class='line'>--------------------------------------------------------------------------------
</span><span class='line'>String      +:               64
</span><span class='line'>String      *:               71
</span><span class='line'>String      index:           68125</span></code></pre></td></tr></table></div></figure>


<p>わざわざアプリにパフォーマンスを計測するためのコードを追加しなくても、どのメソッドの処理が重たいのかが分かります。</p>

<h2>まとめ</h2>

<p>DTrace を利用すると、アプリケーションは全く変更しなくても実行をトレースすることができます。RubyMotion アプリはもちろん、Ruby 2.0 で DTrace がサポートされると Web アプリでも同様にトレースできることでしょう。</p>

<h2>参考</h2>

<p>MacRuby の DTrace のサンプルです。メソッドの実行回数を計測するスクリプトがあったりします。</p>

<ul>
<li><a href="https://github.com/MacRuby/MacRubySamples/tree/master/DTrace">https://github.com/MacRuby/MacRubySamples/tree/master/DTrace</a></li>
</ul>


<p>DTrace の基本が書かれています。</p>

<ul>
<li><a href="http://nippondanji.blogspot.jp/2010/02/ddtrace.html">D言語基礎文法最速マスター（DTraceのほう）</a></li>
</ul>


<p>DTrace についてはオラクルのドキュメントが一番詳しいです。</p>

<ul>
<li><a href="http://docs.oracle.com/cd/E19253-01/819-0395/">http://docs.oracle.com/cd/E19253-01/819-0395/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux を使用しているとシミュレータでアプリが起動しない]]></title>
    <link href="http://watson1978.github.io/blog/2012/10/19/rubymotion-can-not-launch-simulator-in-tmux/"/>
    <updated>2012-10-19T09:06:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/10/19/rubymotion-can-not-launch-simulator-in-tmux</id>
    <content type="html"><![CDATA[<p>昨日は「<a href="http://connpass.com/event/1201/">第2回 RubyMotion もくもく会</a>」に参加してきました。参加された皆様お疲れ様でした。</p>

<p>今回はそのときに遭遇した現象について書きます。</p>

<!-- more -->


<p>「RubyMotion をアップデートした後で、シミュレータが起動しなくなりました」と質問があったので見せていただいたら、<code>rake</code> コマンドでシミュレータを起動しようとすると、以下のようなログが表示されたきり、その後アプリが動き出すこともないしシミュレータが前面に表示されることもありません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake
</span><span class='line'>     Build ./build/iPhoneSimulator-6.0-Development
</span><span class='line'>   Compile ./app/app_delegate.rb
</span><span class='line'>   Compile ./app/hello_view.rb
</span><span class='line'>   Compile ./app/hello_view_controller.rb
</span><span class='line'>    Create ./build/iPhoneSimulator-6.0-Development/Hello.app
</span><span class='line'>      Link ./build/iPhoneSimulator-6.0-Development/Hello.app/Hello
</span><span class='line'>    Create ./build/iPhoneSimulator-6.0-Development/Hello.app/Info.plist
</span><span class='line'>    Create ./build/iPhoneSimulator-6.0-Development/Hello.app/PkgInfo
</span><span class='line'>      Copy ./resources/icon.png
</span><span class='line'>    Create ./build/iPhoneSimulator-6.0-Development/Hello.dSYM
</span><span class='line'>  Simulate ./build/iPhoneSimulator-6.0-Development/Hello.app</span></code></pre></td></tr></table></div></figure>


<p>CPU 使用率が跳ね上がることもなく、<code>rake debug=1</code> や <code>rake mode=release</code> といろいろ起動方法を変えても、RubyMotion をダウングレードしても Mac を再起動しても相変わらずシミュレータはうんともすんとも言ってくれません。どうやら tmux の問題らしく、<a href="https://twitter.com/satococoa">@satococoa</a> さんに教えていただいた回避方法は、以下のものです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install reattach-to-user-namespace
</span><span class='line'>$ echo 'set-option -g default-command "reattach-to-user-namespace -l zsh"' &gt;&gt; .tmux.conf</span></code></pre></td></tr></table></div></figure>


<p>tmux を使っていると何か問題があるというのは聞いたことがあるのですが、こんな現象だとは初めて知りました。知らないとずっとハマってしまいそうな現象ですね。tmux を使われている方はご注意ください。</p>
]]></content>
  </entry>
  
</feed>
