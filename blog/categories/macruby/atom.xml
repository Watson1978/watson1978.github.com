<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: macruby | Watson's Blog]]></title>
  <link href="http://watson1978.github.io/blog/categories/macruby/atom.xml" rel="self"/>
  <link href="http://watson1978.github.io/"/>
  <updated>2016-07-04T18:10:46+09:00</updated>
  <id>http://watson1978.github.io/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bonjour RubyMotion]]></title>
    <link href="http://watson1978.github.io/blog/2012/09/10/bonjour-rubymotion/"/>
    <updated>2012-09-10T17:03:00+09:00</updated>
    <id>http://watson1978.github.io/blog/2012/09/10/bonjour-rubymotion</id>
    <content type="html"><![CDATA[<p>今まで主夫兼 MacRuby Team メンバーみたいな肩書きだったのが、9 月 4 日 からは RubyMotion Team メンバーという肩書きが増えました。ありがとうございます。2010 年 8 月に MacRuby Team メンバーに加えていただいてから、少しずつ MacRuby の不具合を取り除いてきましたが、ここまでのものになると参加当時は思ってもみませんでした。Bonjour RubyMotion!</p>

<p>ということで、今日は RubyMotion で Bonjour を使ったものを書いてみました。</p>

<!-- more -->


<p>NSNetServiceBrowser と NSNetService というクラスを使って、iOS 側から Web サーバを探して接続するものとなっています。</p>

<pre><code class="ruby app/app_delegate.rb">class BJController &lt; UIViewController
  def viewDidLoad
    super

    # NSNetServiceBrowser を使ってサービスを検索
    @netServiceBrowser = NSNetServiceBrowser.alloc.init
    @netServiceBrowser.delegate = self
    @netServiceBrowser.searchForServicesOfType("_http._tcp", inDomain:"local")
    self
  end

  def netServiceBrowser(netServiceBrowser,
                        didFindService: service,
                        moreComing: moreComing)
    @netServiceBrowser.stop

    # NSNetService を使って接続先のアドレスを解決
    @service = NSNetService.alloc.initWithDomain(service.domain, type:service.type, name:service.name)
    @service.delegate = self
    @service.resolveWithTimeout(5.0)
  end

  def netServiceDidResolveAddress(service)
    @service.stop

    url = "http://#{@service.hostName}:#{@service.port}/"
    @webview = UIWebView.new.tap do |v|
      v.frame = self.view.bounds
      v.scalesPageToFit = true
      v.loadRequest(NSURLRequest.requestWithURL(NSURL.URLWithString(url)))
      v.delegate = self
      view.addSubview(v)
    end    
  end
end

class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)
    @window.rootViewController = BJController.alloc.initWithNibName(nil, bundle: nil)
    @window.makeKeyAndVisible
    true
  end
end
</code></pre>

<p>Web サーバはどうするかというと、<a href="https://github.com/MacRuby/MacRubySamples/blob/master/Scripts/webrick.rb">https://github.com/MacRuby/MacRubySamples/blob/master/Scripts/webrick.rb</a> のサンプルを利用すると、すでに Bonjour が使われているので簡単ですね〜。</p>

<p>あらかじめ、MacRuby で書かれたサーバを起動しておいて、上記の iOS アプリを実行します。あとは、Bonjour を使って見つかったサーバに接続し UIWebView で表示しています。iPhone で URL を入力するのが面倒なので、そんな手間なしでさくっと Web ページを確認したいときとかに便利・・・かもしれませんね。</p>

<p><img src="/images/blog/bonjour.png" alt="Bonjour" /></p>
]]></content>
  </entry>
  
</feed>
