<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyMotion, | Watson's Blog]]></title>
  <link href="http://watson1978.github.com/blog/categories/rubymotion-/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/"/>
  <updated>2012-09-19T22:02:01+09:00</updated>
  <id>http://watson1978.github.com/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion で Parse を使ってみました]]></title>
    <link href="http://watson1978.github.com/blog/2012/09/19/using-parse/"/>
    <updated>2012-09-19T17:15:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/09/19/using-parse</id>
    <content type="html"><![CDATA[<p><a href="https://www.parse.com/">Parse</a> は、ユーザ認証やプッシュ通知といったサーバ側の実装が必要となる機能をあらかじめ用意してくれていて、アプリから単に API を呼び出すだけで簡単にそれらの機能を利用できてしまうという、すごく便利なサービスです。</p>

<p><img src="/images/blog/parse.png" alt="Parse" /></p>

<!-- more -->


<h2>ユーザ登録</h2>

<p>「Try it for free」ボタンをクリックすると無料でユーザ登録できます。</p>

<p><img src="/images/blog/parse_sign_up.png" alt="sign up" /></p>

<p>メールアドレスとパスワードを入力すると、次に Parse を使うアプリ名を聞かれます。後ほど変更することもできるので適当な名前を入力しておきましょう。私は「HelloParse」と安易な名前を入力しました。</p>

<p><img src="/images/blog/parse_get_started.png" alt="get started" /></p>

<h2>Parse SDK をダウンロード</h2>

<p><a href="https://www.parse.com/apps/quickstart">Quick Start</a> ページで Parse SDK の簡単な導入方法について説明が書かれていますので、これに従って作業してみましょう。</p>

<p>「1 Choose your platform」で、"iOS" と "Existing Project" を選択しておきます。("Existing Project" を選択しておくと、SDK のみをダウンロードしやすいので)。</p>

<p><img src="/images/blog/parse_choose_platform.png" alt="Choose your platform" /></p>

<p>「3 Download &amp; install the SDK」で、Parse SDK をダウンロードしておきます。</p>

<p><img src="/images/blog/parse_download_sdk.png" alt="Download &amp; install the SDK" /></p>

<h2>RubyMotion アプリを作成</h2>

<p>それでは、Parse SDK を使用した RubyMotion で「HelloParse」というアプリを作ってみましょう。</p>

<p>```
$ motion create HelloParse</p>

<pre><code>Create HelloParse
Create HelloParse/.gitignore
Create HelloParse/Rakefile
Create HelloParse/app
Create HelloParse/app/app_delegate.rb
Create HelloParse/resources
Create HelloParse/spec
Create HelloParse/spec/main_spec.rb
</code></pre>

<p>```</p>

<p>先ほどダウンロードした Parse SDK を <code>vendor</code> ディレクトリに配置します。</p>

<p><code>
$ cd HelloParse
$ mkdir vendor
</code></p>

<p><code>parse-library-1.1.6.zip</code> を解凍すると <code>Parse.framework</code> というディレクトリが展開されるので、このディレクトリを <code>vendor</code> ディレクトリにコピーします。</p>

<p>```
$ tree vendor/
vendor/
└── Parse.framework</p>

<pre><code>├── Headers -&gt; Versions/Current/Headers
</code></pre>

<p>...
```</p>

<h3>Rakefile を編集</h3>

<p>アプリで Parse SDK が使われるように <code>Rakefile</code> を編集し設定します。以下のように <code>vendor_project</code>、<code>frameworks</code>、<code>libs</code> を設定します。</p>

<p><code>``ruby
Motion::Project::App.setup do |app|
  # Use</code>rake config' to see complete project settings.
  app.name = 'HelloParse'</p>

<p>  # Parse SDK
  app.vendor_project('vendor/Parse.framework',</p>

<pre><code>                  :static,
                  :products =&gt; ['Parse'],
                  :headers_dir =&gt; 'Headers')
</code></pre>

<p>  app.frameworks += %w(AudioToolbox CFNetwork MobileCoreServices QuartzCore Security StoreKit SystemConfiguration)
  app.libs += %W(/usr/lib/libz.dylib /usr/lib/libsqlite3.dylib)
end
```</p>

<h3>Parse SDK API を使ってみよう</h3>

<p>```ruby app/app_delegate.rb
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>Parse.setApplicationId("&lt;Application-Id&gt;", 
                       clientKey:"&lt;Client-Key&gt;")

obj = PFObject.objectWithClassName("TestObject")
obj.setObject("bar", forKey:"foo")
obj.save()
true
</code></pre>

<p>  end
end
```</p>

<p><code>setApplicationId</code> メソッドで使用している <code>&lt;Application-Id&gt;</code> と <code>&lt;Client-Key&gt;</code> は <a href="https://www.parse.com/apps/quickstart">Quick Start</a> に書かれていたものを使用します。</p>

<p><img src="/images/blog/parse_app_id_client_key.png" alt="Application ID &amp; Client Key" /></p>

<p><code>rake</code> でアプリを実行してみましょう。Quick Start に設置されていた「Test」というボタンをクリックすると、正しく動作したか確認することができます。</p>

<p><img src="/images/blog/parse_test.png" alt="Test" /></p>

<p>次は Parse SDK を使って Push Notification に挑戦してみたいなと思います。Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bonjour RubyMotion]]></title>
    <link href="http://watson1978.github.com/blog/2012/09/10/bonjour-rubymotion/"/>
    <updated>2012-09-10T17:03:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/09/10/bonjour-rubymotion</id>
    <content type="html"><![CDATA[<p>今まで主夫兼 MacRuby Team メンバーみたいな肩書きだったのが、9 月 4 日 からは RubyMotion Team メンバーという肩書きが増えました。ありがとうございます。2010 年 8 月に MacRuby Team メンバーに加えていただいてから、少しずつ MacRuby の不具合を取り除いてきましたが、ここまでのものになると参加当時は思ってもみませんでした。Bonjour RubyMotion!</p>

<p>ということで、今日は RubyMotion で Bonjour を使ったものを書いてみました。</p>

<!-- more -->


<p>NSNetServiceBrowser と NSNetService というクラスを使って、iOS 側から Web サーバを探して接続するものとなっています。</p>

<p>```ruby app/app_delegate.rb
class BJController &lt; UIViewController
  def viewDidLoad</p>

<pre><code>super

# NSNetServiceBrowser を使ってサービスを検索
@netServiceBrowser = NSNetServiceBrowser.alloc.init
@netServiceBrowser.delegate = self
@netServiceBrowser.searchForServicesOfType("_http._tcp", inDomain:"local")
self
</code></pre>

<p>  end</p>

<p>  def netServiceBrowser(netServiceBrowser,</p>

<pre><code>                    didFindService: service,
                    moreComing: moreComing)
@netServiceBrowser.stop

# NSNetService を使って接続先のアドレスを解決
@service = NSNetService.alloc.initWithDomain(service.domain, type:service.type, name:service.name)
@service.delegate = self
@service.resolveWithTimeout(5.0)
</code></pre>

<p>  end</p>

<p>  def netServiceDidResolveAddress(service)</p>

<pre><code>@service.stop

url = "http://#{@service.hostName}:#{@service.port}/"
@webview = UIWebView.new.tap do |v|
  v.frame = self.view.bounds
  v.scalesPageToFit = true
  v.loadRequest(NSURLRequest.requestWithURL(NSURL.URLWithString(url)))
  v.delegate = self
  view.addSubview(v)
end    
</code></pre>

<p>  end
end</p>

<p>class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>@window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)
@window.rootViewController = BJController.alloc.initWithNibName(nil, bundle: nil)
@window.makeKeyAndVisible
true
</code></pre>

<p>  end
end
```</p>

<p>Web サーバはどうするかというと、<a href="https://github.com/MacRuby/MacRubySamples/blob/master/Scripts/webrick.rb">https://github.com/MacRuby/MacRubySamples/blob/master/Scripts/webrick.rb</a> のサンプルを利用すると、すでに Bonjour が使われているので簡単ですね〜。</p>

<p>あらかじめ、MacRuby で書かれたサーバを起動しておいて、上記の iOS アプリを実行します。あとは、Bonjour を使って見つかったサーバに接続し UIWebView で表示しています。iPhone で URL を入力するのが面倒なので、そんな手間なしでさくっと Web ページを確認したいときとかに便利・・・かもしれませんね。</p>

<p><img src="/images/blog/bonjour.png" alt="Bonjour" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion で使う iOS スタティックライブラリを作る]]></title>
    <link href="http://watson1978.github.com/blog/2012/06/07/create-static-library/"/>
    <updated>2012-06-07T14:55:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/06/07/create-static-library</id>
    <content type="html"><![CDATA[<p>今日はどのように iOS スタティックライブラリを作るのか、Xcode と格闘していました。</p>

<p>何も考えずにビルドしてしまうと ARM 用のバイナリのみのライブラリができてしまい、i386 バイナリを必要とするシミュレータ用には使えません。</p>

<p>ビルドの仕方がわからずに、どうすればライブラリが作れるか試行錯誤の課程を書きます。</p>

<!-- more -->


<h2>ライブラリ用のプロジェクトを作成</h2>

<p>Xcode で "Cocoa Touch Static Library" というテンプレートを選択し、スタティックライブラリ用のプロジェクトを作成します。</p>

<p><img src="/images/blog/cocoa_touch_static_library.png" alt="cocoa touch static library" /></p>

<p>あとは、ライブラリで必要なプログラムを書きます。</p>

<h2>ビルドする</h2>

<p>ARMv6、ARMv7、i386 バイナリを含むユニバーサルなライブラリが欲しいのですが、Xcode でどのようにビルドすれば良いのかわからず途中であきらめ、Terminal 上での操作しました。</p>

<p>Terminal で作成したプロジェクトのディレクトリに移動します。今回は "foo" という名前でプロジェクトを作成しています。</p>

<p><code>
$ ls
foo/           foo.xcodeproj/
</code></p>

<p>ARM バイナリを作成します。</p>

<p><code>
$ xcodebuild -arch armv6 -arch armv7
$ file build/Release-iphoneos/libfoo.a
build/Release-iphoneos/libfoo.a: Mach-O universal binary with 2 architectures
build/Release-iphoneos/libfoo.a (for architecture armv6):   current ar archive random library
build/Release-iphoneos/libfoo.a (for architecture armv7):   current ar archive random library
</code></p>

<p>i386 バイナリは SDK に iphonesimulator を指定するとビルドされるようです。</p>

<p><code>
$ xcodebuild -sdk iphonesimulator
$ file build/Release-iphonesimulator/libfoo.a
build/Release-iphonesimulator/libfoo.a: current ar archive random library
</code></p>

<p>ライブラリファイルが 2 つになってしまったので、<code>lipo</code> コマンドを使って 1 つに結合します。</p>

<p><code>
$ lipo -create build/Release-iphoneos/libfoo.a build/Release-iphonesimulator/libfoo.a -output libfoo.a
$ file libfoo.a
libfoo.a: Mach-O universal binary with 3 architectures
libfoo.a (for architecture armv6): current ar archive random library
libfoo.a (for architecture armv7): current ar archive random library
libfoo.a (for architecture i386):  current ar archive random library
</code></p>

<p>これで欲しかったライブラリができあがりました。</p>

<p>もっと簡単に作れる方法をご存じの方がおられましたら、ご教示ください。</p>
]]></content>
  </entry>
  
</feed>
