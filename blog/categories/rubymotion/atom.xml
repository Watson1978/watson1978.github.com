<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyMotion | Watson's Blog]]></title>
  <link href="http://watson1978.github.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/"/>
  <updated>2012-09-20T18:36:38+09:00</updated>
  <id>http://watson1978.github.com/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion と Parse で Push Notifiation してみたよ〜]]></title>
    <link href="http://watson1978.github.com/blog/2012/09/20/push-notifiation-with-rubymotion/"/>
    <updated>2012-09-20T16:01:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/09/20/push-notifiation-with-rubymotion</id>
    <content type="html"><![CDATA[<p>先日に引き続き <a href="https://www.parse.com/">Parse</a> で遊んでいます。今日は<a href="https://www.parse.com/apps/quickstart_push">Push Quick Start Guide</a> を読みながら Push Notifiation に挑戦しました。いろいろ設定することがあって大変ですね。慣れるとそうでもないのでしょうか？(^ ^;)</p>

<!-- more -->


<h2>証明書を作成</h2>

<ol>
<li>「キーチェーンアクセス」を起動します。</li>
<li>メニューの "キーチェーンアクセス" -> "証明書アシスタント" -> "認証局に証明書を要求" を選択します。</li>
<li>メールアドレスと名前を記入して、"ディスクに保存" を選択し "続ける" をクリックします。<code>CertificateSigningRequest.certSigningRequest</code> というファイルが保存されます。("CAのメールアドレス" の欄は未記入で良かったみたいです・・・)<br/>
<img src="/images/blog/parse_push/certificate_signing_request.png" alt="Certificate Signing Request" /></li>
</ol>


<p>次に <a href="https://developer.apple.com/ios/manage/bundles/index.action">iOS Provisioning Portal</a> で App ID の設定をします。</p>

<ol>
<li>"App IDs" というメニューを選択し、"New App ID" ボタンをクリックします。</li>
<li>"Description" にアプリの内容、"Bundle Identifier" にアプリの識別子を記入します。識別子には <code>*</code> を含めず、アプリ名までしっかり記入する必要があるようです。<br/>
<img src="/images/blog/parse_push/app_id.png" alt="App IDs" /></li>
<li>作成したアプリ ID の "Configure" をクリックします。<br/>
<img src="/images/blog/parse_push/app_id_configure.png" alt="App IDs" /></li>
<li>"Enable for Apple Push Notification service" のチェックを on にし、"Development Push SSL Certificate" の "Configure" ボタンをクリックします。<br/>
<img src="/images/blog/parse_push/enable_push_notification.png" alt="App IDs" /></li>
<li>"Generate a Certificate Signing Request" というポップアップウィンドウが表示されます。"Continnue" ボタンをクリックして次の画面に進みます。</li>
<li>"Submit Certificate Signing Request" 画面が表示されます。ここで、「キーチェーンアクセス」で作成した <code>CertificateSigningRequest.certSigningRequest</code> ファイルを選択し、"Generate" ボタンをクリックします。<br/>
<img src="/images/blog/parse_push/submit_certificate_signing_request.png" alt="App IDs" /></li>
<li><p>"Download &amp; Install 〜" の画面まで進みます。"Download" をクリックして証明書をダウンロードしておきます。<br/>
<img src="/images/blog/parse_push/download_install_certificate.png" alt="App IDs" /></p></li>
<li><p>上の作業でダウンロードした証明書をダブルクリックして「キーチェーンアクセス」へ登録します。</p></li>
<li>キーチェーンアクセスで "ログイン" 項目の、"自分の証明書" を表示すると先ほど登録した証明書があります。右クリックして「書き出す」を選択します。<br/>
<img src="/images/blog/parse_push/keychain_export.png" alt="KeyChain Export" /></li>
<li>".p12" という形式でファイルを保存します。<br/>
<img src="/images/blog/parse_push/export_p12.png" alt="KeyChain Export" /></li>
<li>".p12" 形式のファイルを保存する際にパスワードを求められますが、空欄のままにしておくようです。<br/>
<img src="/images/blog/parse_push/export_p12_password.png" alt="KeyChain Export" /></li>
</ol>


<h2>Provisioning Profile を作成</h2>

<p>ここまでの作業ですでに心が折れそうなくらい、設定が面倒くさいですね。Parse がさっぱり出てこないし・・・。</p>

<p><a href="https://developer.apple.com/ios/manage/bundles/index.action">iOS Provisioning Portal</a> へ戻り、Provisioning Profile を作成しましょう。</p>

<ol>
<li>"Provisioning" メニューを選択し、"New Profile" ボタンをクリックします。</li>
<li>わかりやすい "Profile Name" を記入し、プッシュ通知するアプリを選択します。<br/>
<img src="/images/blog/parse_push/provisioning.png" alt="Provisioning" /></li>
<li>"New Profile" ボタンをクリックした画面に戻り、Provisioning をダウンロードしておきます。<br/>
<img src="/images/blog/parse_push/download_provisioning.png" alt="Provisioning" /></li>
<li>ダウンロードした Provisioning Profile をダブルクリックし Xcode へ登録しておきます。</li>
</ol>


<h2>Parse へ .p12 ファイルを登録</h2>

<ol>
<li>Parse の <a href="https://www.parse.com/apps/">Dashboard</a> を開きます。</li>
<li>プッシュ通知を行うアプリの "Setting" 画面を開きます。</li>
<li>キーチェーンアクセスで作成した ".p12" ファイルを登録します。<br/>
<img src="/images/blog/parse_push/parse_dashboard.png" alt="Dashboard" /></li>
</ol>


<h2>プッシュ通知を受け付けるアプリを作成</h2>

<h3>Rakefile を編集</h3>

<p>昨日作成した <code>Rakefile</code> に <code>identifier</code>、<code>provisioning_profile</code>、<code>entitlements</code> の設定を追加します。</p>

<p><code>ruby
Motion::Project::App.setup do |app|
...
  app.identifier = 'com.yourcompany.HelloParsePush'
  app.provisioning_profile = "/Users/watson/Library/MobileDevice/Provisioning Profiles/CE5E34BE-FDEB-43C5-860A-9301122AB46D.mobileprovision"
  app.entitlements['aps-environment'] = 'development'
end
</code></p>

<p><code>provisioning_profile</code> に設定する Provisioning Profile のパスは Xcode の Organizer で確認することができます。該当する Profile 上で右クリック "Reveal Profile in Finder" を選択すると、Finder 上で確認できます。</p>

<h3>アプリを作成</h3>

<p><code>app/app_delegate.rb</code> に、次のようなコードを記述します。</p>

<p>```ruby app/app_delegate.rb
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>Parse.setApplicationId("WGbUIbeszIgo46N2k7PcZlorkq30FAV9PNfSVHrJ", 
                       clientKey:"DwEzOAUZNql8kofzMaV0e30vCzJ3LeWBC3ODoGeA")

application.registerForRemoteNotificationTypes(UIRemoteNotificationTypeBadge|
                                            UIRemoteNotificationTypeAlert|
                                            UIRemoteNotificationTypeSound)

true
</code></pre>

<p>  end</p>

<p>  def application(application,</p>

<pre><code>    didRegisterForRemoteNotificationsWithDeviceToken:newDeviceToken)
# Tell Parse about the device token.
PFPush.storeDeviceToken(newDeviceToken)
# Subscribe to the global broadcast channel.
PFPush.subscribeToChannelInBackground("")
</code></pre>

<p>  end</p>

<p>  def application(application,</p>

<pre><code>    didReceiveRemoteNotification:userInfo)
PFPush.handlePush(userInfo)
</code></pre>

<p>  end</p>

<p>  def application(application,</p>

<pre><code>    didFailToRegisterForRemoteNotificationsWithError:error)
if error.code == 3010
  NSLog("Push notifications don't work in the simulator!")
else
  NSLog("didFailToRegisterForRemoteNotificationsWithError: %@", error)
end
</code></pre>

<p>  end
end
```</p>

<p>プッシュ通知はシミュレータ上で動作確認できないようなので、デバイスへアプリを転送します。</p>

<p>```
$ rake device</p>

<p>```
デバイス上でアプリを起動したら、<a href="https://www.parse.com/apps/quickstart_push">Push Quick Start Guide</a> ページの "Send Push Test" ボタンをクリックします。</p>

<p>正しく動作すると、</p>

<p><img src="/images/blog/parse_push/receive_push.png" alt="Push Notification" /></p>

<p>のように、通知を受け取ることができます！</p>

<p>これで、Apple が何か発表したか監視するものを用意すれば、簡単にストーカー行為ができますね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion で Parse を使ってみました]]></title>
    <link href="http://watson1978.github.com/blog/2012/09/19/using-parse/"/>
    <updated>2012-09-19T17:15:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/09/19/using-parse</id>
    <content type="html"><![CDATA[<p><a href="https://www.parse.com/">Parse</a> は、ユーザ認証やプッシュ通知といったサーバ側の実装が必要となる機能をあらかじめ用意してくれていて、アプリから単に API を呼び出すだけで簡単にそれらの機能を利用できてしまうという、すごく便利なサービスです。</p>

<p><img src="/images/blog/parse.png" alt="Parse" /></p>

<!-- more -->


<h2>ユーザ登録</h2>

<p>さっそく、ユーザ登録をして Parse を使ってみましょう。「Try it for free」ボタンをクリックすると無料でユーザ登録できます。</p>

<p><img src="/images/blog/parse_sign_up.png" alt="sign up" /></p>

<p>メールアドレスとパスワードを入力すると、次に Parse を使うアプリ名を聞かれます。後ほど変更することもできるので適当な名前を入力しておきましょう。私は「HelloParse」と安易な名前を入力しました。</p>

<p><img src="/images/blog/parse_get_started.png" alt="get started" /></p>

<h2>Parse SDK をダウンロード</h2>

<p><a href="https://www.parse.com/apps/quickstart">Quick Start</a> ページで Parse SDK の簡単な導入方法について説明が書かれていますので、これに従って作業してみましょう。</p>

<p>「1 Choose your platform」で、"iOS" と "Existing Project" を選択しておきます。("Existing Project" を選択しておくと、SDK のみをダウンロードしやすいので)。</p>

<p><img src="/images/blog/parse_choose_platform.png" alt="Choose your platform" /></p>

<p>「3 Download &amp; install the SDK」で、Parse SDK をダウンロードしておきます。</p>

<p><img src="/images/blog/parse_download_sdk.png" alt="Download &amp; install the SDK" /></p>

<h2>RubyMotion アプリを作成</h2>

<p>それでは、Parse SDK を使用した RubyMotion で「HelloParse」というアプリを作ってみましょう。</p>

<p>```
$ motion create HelloParse</p>

<pre><code>Create HelloParse
Create HelloParse/.gitignore
Create HelloParse/Rakefile
Create HelloParse/app
Create HelloParse/app/app_delegate.rb
Create HelloParse/resources
Create HelloParse/spec
Create HelloParse/spec/main_spec.rb
</code></pre>

<p>```</p>

<p>先ほどダウンロードした Parse SDK を <code>vendor</code> ディレクトリに配置します。</p>

<p><code>
$ cd HelloParse
$ mkdir vendor
</code></p>

<p><code>parse-library-1.1.6.zip</code> を解凍すると <code>Parse.framework</code> というディレクトリが展開されるので、このディレクトリを <code>vendor</code> ディレクトリにコピーします。</p>

<p>```
$ tree vendor/
vendor/
└── Parse.framework</p>

<pre><code>├── Headers -&gt; Versions/Current/Headers
</code></pre>

<p>...
```</p>

<h3>Rakefile を編集</h3>

<p>アプリで Parse SDK が使われるように <code>Rakefile</code> を編集し設定します。以下のように <code>vendor_project</code>、<code>frameworks</code>、<code>libs</code> を設定します。</p>

<p><code>``ruby
Motion::Project::App.setup do |app|
  # Use</code>rake config' to see complete project settings.
  app.name = 'HelloParse'</p>

<p>  # Parse SDK
  app.vendor_project('vendor/Parse.framework',</p>

<pre><code>                  :static,
                  :products =&gt; ['Parse'],
                  :headers_dir =&gt; 'Headers')
</code></pre>

<p>  app.frameworks += %w(AudioToolbox CFNetwork MobileCoreServices QuartzCore Security StoreKit SystemConfiguration)
  app.libs += %W(/usr/lib/libz.dylib /usr/lib/libsqlite3.dylib)
end
```</p>

<h3>Parse SDK API を使ってみよう</h3>

<p>```ruby app/app_delegate.rb
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>Parse.setApplicationId("&lt;Application-Id&gt;", 
                       clientKey:"&lt;Client-Key&gt;")

obj = PFObject.objectWithClassName("TestObject")
obj.setObject("bar", forKey:"foo")
obj.save()
true
</code></pre>

<p>  end
end
```</p>

<p><code>setApplicationId</code> メソッドで使用している <code>&lt;Application-Id&gt;</code> と <code>&lt;Client-Key&gt;</code> は <a href="https://www.parse.com/apps/quickstart">Quick Start</a> に書かれていたものを使用します。</p>

<p><img src="/images/blog/parse_app_id_client_key.png" alt="Application ID &amp; Client Key" /></p>

<p><code>rake</code> でアプリを実行してみましょう。Quick Start に設置されていた「Test」というボタンをクリックすると、正しく動作したか確認することができます。</p>

<p><img src="/images/blog/parse_test.png" alt="Test" /></p>

<p>次は Parse SDK を使って Push Notification に挑戦してみたいなと思います。Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion ではじめるGoogle Analytics for iOS]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/30/use-google-analytics/"/>
    <updated>2012-08-30T08:42:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/30/use-google-analytics</id>
    <content type="html"><![CDATA[<p>アプリがどれだけダウンロードされているか開発者なら誰もが気になるところでしょうが、どの機能がどれだけ使われているかといったことも気になるところがと思います。</p>

<p>Google Analytics for iOS を利用すると、ユーザが使用している機能を簡単にトラッキングすることができます。</p>

<!-- more -->


<h2>トラッキング ID を発行する</h2>

<p>Google Analytics の「アカウントの管理」画面で新しいアカウントを追加します。</p>

<p><img src="/images/blog/analytics_add_account.png" alt="アカウントの管理" /></p>

<p>次にアカウント名などの情報を記入します。</p>

<p><img src="/images/blog/analytics_create_account.png" alt="アカウントの追加" /></p>

<p>「ウェブサイトのURL」では "ウェブサイト以外"、「タイムゾーン」は "日本" を選択しておくとよいでしょう。</p>

<p>アカウントを作成した後、"UA-xxxxxxxx-1" のようなトラッキング ID が発行されます。あとで使用するので控えておいてください。</p>

<h2>Google Analytics SDK for iOS をダウンロード</h2>

<p><a href="https://developers.google.com/analytics/devguides/collection/ios/resources">Google Analytics SDK for iOS</a> から、SDK をダウンロードしておきます。</p>

<p><img src="/images/blog/analytics_sdk.png" alt="SDK のダウンロード" /></p>

<h2>RubyMotion プロジェクトを作成</h2>

<p>それでは、アプリに Google Analytics を組み込んでいきましょう。今回は「HelloAnalytics」という名前でアプリを作成します。</p>

<p><code>
$ motion create HelloAnalytics
</code></p>

<p>先ほどダウンロードした SDK のアーカイブを展開し、"Library" ディレクトリをプロジェクトに追加します。まずプロジェクトに "vendor" ディレクトリを作成しましょう。</p>

<p><code>
$ cd HelloAnalytics/
$ mkdir vendor
</code></p>

<p>作成したディレクトリに SDK の "Library" を追加します。以下のようなファイル構成になります。</p>

<p>```
$ tree vendor/
vendor/
└── Library</p>

<pre><code>├── GANTracker.h
├── libGoogleAnalytics.a
└── libGoogleAnalytics_NoThumb.a
</code></pre>

<p>```</p>

<h2>プロジェクトの設定</h2>

<p>プロジェクトの <code>Rakefile</code> をエディタで開き SDK を使うための設定をします。</p>

<p>```ruby</p>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'HelloAnalytics'
  app.vendor_project('vendor/Library',</p>

<pre><code>:static, :products =&gt; ['libGoogleAnalytics.a'], :headers_dir =&gt; '.')
</code></pre>

<p>  app.frameworks &lt;&lt; "CFNetwork"
  app.libs &lt;&lt; "/usr/lib/libsqlite3.dylib"
end
```</p>

<p><code>vendor_project</code> を設定し Google Analytics SDK を利用できるようにします。SDK は CFNetwork.framework と libsqlite3.dylib を使用するようなので、<code>frameworks</code> と <code>libs</code> でそれぞれ設定します。</p>

<p>これでアプリで Google Analytics SDK を使えるようになります！</p>

<h2>トラッキングを開始</h2>

<p>それでは、以下のようなコードをアプリに追加してトラッキングを開始してみましょう。</p>

<p>```ruby
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>GANTracker.sharedTracker.startTrackerWithAccountID("UA-xxxxxxxx-1",
                                                   dispatchPeriod: 10,
                                                   delegate: nil)


error = Pointer.new(:object)
unless GANTracker.sharedTracker.trackPageview("/app_entry_point",
                                              withError: error)
  # Handle error here
end

true
</code></pre>

<p>  end
end
```</p>

<p><code>startTrackerWithAccountID</code> メソッドには、先ほど発行されたトラッキング ID を記述します。</p>

<p>アプリを実行すると、計測結果が Google Analytics で確認できるようになります。</p>

<p><img src="/images/blog/analytics_result.png" alt="計測結果" /></p>

<p><a href="https://developers.google.com/analytics/devguides/collection/ios/devguide">https://developers.google.com/analytics/devguides/collection/ios/devguide</a> に SDK の使い方について詳しく書かれていますので、必要なトラッキング処理をアプリに追加しいろいろ計測してみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 4.3 を対象としたアプリケーションを作る]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/29/make-an-application-which-target-the-ios-4/"/>
    <updated>2012-08-29T21:02:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/29/make-an-application-which-target-the-ios-4</id>
    <content type="html"><![CDATA[<p>RubyMotion は、iOS 4.3 以降を対象としたアプリケーションを作ることができます。プロジェクトの設定や、シミュレータの起動方法について書きたいと思います。個人的には世の中が iOS 5.x だけになると、みんなハッピーになれそうな気がするのですが・・・(^ ^;)</p>

<div class="note">
今のところ OS X 10.8 環境では iOS 4.3 シミュレータをインストールできないようなので、OS X 10.7 環境が必要となるので注意してください。
</div>




<!-- more -->


<h2>iOS 4.3 シミュレータをインストール</h2>

<p>もし、iOS 4.3 シミュレータをお持ちでなければインストールしておきます。Xcode の [Preferences...] メニューの [Downloads] タブでシミュレータをインストールすることができます。</p>

<p><img src="/images/blog/install_ios43_simulator.png" alt="install iOS 4.3 simulator" /></p>

<div class="note">
OS X 10.7 環境では「iOS 4.3 Simulator」項目があるのですが、OS X 10.8 では表示されずインストールできないようです。
</div>


<h2>プロジェクトの設定</h2>

<p>プロジェクトの <code>Rakefile</code> で <code>deployment_target</code> を設定し、アプリケーションのターゲットを iOS 4.3 にします。</p>

<p>```ruby</p>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'your app name'
  app.deployment_target = "4.3"
end
```</p>

<h2>アプリケーションを実行</h2>

<p>単に <code>rake</code> を実行すると iOS 5.1 用のシミュレータが起動しますので、環境変数 <code>target</code> でiOS 4.3 シミュレータを起動するように指定します。</p>

<p><code>
$ rake target=4.3
</code></p>

<p>ほかの環境変数とあわせて利用できるので、たとえば iPad シミュレータを起動する場合には以下のように実行します。</p>

<p><code>
$ rake target=4.3 device_family=ipad
</code></p>

<p>あとはアプリケーションのコードをひたすら記述するだけですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text を導入して RubyMotion アプリ開発をもっと楽しいものに]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/23/make-a-sublime-text-environment/"/>
    <updated>2012-08-23T22:19:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/23/make-a-sublime-text-environment</id>
    <content type="html"><![CDATA[<p>Twitter のつぶやきを眺めていると、RubyMotion アプリ開発では <a href="http://www.sublimetext.com/">Sublime Text</a> をエディタに使うのが定番になってきた感じがします。</p>

<p>いい加減、私もライセンスを購入しないといけないなと思いつつ、環境構築の手順などをまとめておきます。</p>

<!-- more -->


<h2>1. Sublime Text をインストール</h2>

<p><a href="http://www.sublimetext.com/">公式サイト</a> から Sublime Text をダウンロードしてインストールします。</p>

<h2>2. Sublime Package Control をインストール</h2>

<p>Sublime Text は Python で plugin を作成でき、さまざまな機能追加ができるようになっています。Github などを眺めていると便利な plugin がパッケージとしていろいろあります。<a href="http://wbond.net/sublime_packages/package_control">Package Control</a> は、それらパッケージのインストールや不要になった際にはアンインストールしたりと、文字通りパッケージの管理が簡単になります。</p>

<p>Sublime Text を起動し、[View] -> [Show Console] とメニューを選択し (ショートカット : <kbd>control</kbd> + <kbd>`</kbd>)、コンソールに次の文をコピー&amp;ペーストし <kbd>Enter</kbd> を押下して実行します。</p>

<p><code>
import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'
</code></p>

<p>Sublime Text を再起動すると、Package Control が利用できるようになります。</p>

<h2>3. SublimeRubyMotionBuilder をインストール</h2>

<p>次に、<a href="https://twitter.com/haraken3">@haraken3</a> さんが開発されている <a href="https://github.com/haraken3/SublimeRubyMotionBuilder">SublimeRubyMotionBuilder</a> プラグインを導入します。コード補完や、アプリ開発に便利な機能が追加されます。</p>

<p>[Tools] -> [Command Palette...] とメニューを選択し (ショートカット : <kbd>command</kbd> + <kbd>shift</kbd> + <kbd>p</kbd>)、表示されるダイアログに「install package」と入力し実行します。</p>

<p><img src="/images/blog/sublime-install-package.png" alt="install package dialog" /></p>

<p>次に、「RubyMotionBuilder」と入力し <kbd>Enter</kbd> を押下するとプラグインがインストールされます。</p>

<p><img src="/images/blog/sublime-RubyMotionBuilder.png" alt="RubyMotionBuilder" /></p>

<p>RubyMotion のコード(*.rb) か Rakefile を開いた状態にしておくと、以下のようなコマンドが使えるようになり、いちいち Terminal に戻ってでビルドしたりする必要がなくなり便利です。</p>

<table class="table">
<tr><th>内容</th><th>ショートカット</th></tr>
<tr>
    <td>Build</td>
    <td><kbd>command</kbd> + <kbd>b</kbd> <br />(エラーがあった場合 <kbd>F4</kbd> でジャンプ)</td>
</tr>
<tr>
    <td>Clean</td>
    <td><kbd>command</kbd> + <kbd>shift</kbd> + <kbd>p</kbd> の後、「clean」と入力</td>
</tr>
<tr>
    <td>Run</td>
    <td><kbd>command</kbd> + <kbd>r</kbd> <br />(シミュレータを Retina モードにする場合、<kbd>command</kbd> + <kbd>shift</kbd> + <kbd>r</kbd> )</td>
</tr>
<tr>
    <td>Deploy</td>
    <td><kbd>command</kbd> + <kbd>option</kbd> + <kbd>b</kbd></td>
</tr>

</table>


<h2>4. SublimeLinter をインストール</h2>

<p><a href="http://www.willprater.me/blog/2012/07/24/rubymotion-linting-and-highlighting-with-sublime-text/">RubyMotion Linting and Highlighting With Sublime Text</a> で知ったのですが、<a href="https://github.com/SublimeLinter/SublimeLinter">SublimeLinter</a> を導入すると、アプリをコンパイルする前に文法エラーとなる箇所を教えてくれるようになります。</p>

<p><img src="/images/blog/sublime-SublimeLinter.png" alt="SublimeLinter" /></p>

<p>さっそく、SublimeLinter をインストールしてみましょう(上のサイトに書いてあるとおりですが・・・)。</p>

<p>[Tools] -> [Command Palette...] とメニューを選択し (ショートカット : <kbd>command</kbd> + <kbd>shift</kbd> + <kbd>p</kbd>)、表示されるダイアログに「install package」と入力し実行します。「SublimeLinter」と入力し <kbd>Enter</kbd> を押下します。</p>

<p>つぎに [Preferences] -> [Browse Packages...] を選択します。</p>

<p><img src="/images/blog/sublime-browse-package.png" alt="Browse Packages" /></p>

<p>パッケージがインストールされているディレクトリが、Finder で開かれます。 Finder で <code>SublimeLinter/sublimelinter/modules</code> のディレクトリまで行き、<code>ruby_motion.py</code> というファイルを作成し、次の内容をコピー&amp;ペースとします。</p>

<p>```python ruby_motion.py
from ruby import Linter</p>

<p>CONFIG = {</p>

<pre><code>'language': 'RubyMotion',
'executable': '/Library/RubyMotion/bin/ruby',
'lint_args': '-wc'
</code></pre>

<p>}
```</p>

<p>これで RubyMotion アプリ開発がもっと楽になるのではないでしょうか〜。 Enjoy!</p>
]]></content>
  </entry>
  
</feed>
