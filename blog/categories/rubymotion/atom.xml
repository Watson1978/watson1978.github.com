<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyMotion | Watson's Blog]]></title>
  <link href="http://watson1978.github.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/"/>
  <updated>2012-09-20T18:34:03+09:00</updated>
  <id>http://watson1978.github.com/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion ではじめるGoogle Analytics for iOS]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/30/use-google-analytics/"/>
    <updated>2012-08-30T08:42:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/30/use-google-analytics</id>
    <content type="html"><![CDATA[<p>アプリがどれだけダウンロードされているか開発者なら誰もが気になるところでしょうが、どの機能がどれだけ使われているかといったことも気になるところがと思います。</p>

<p>Google Analytics for iOS を利用すると、ユーザが使用している機能を簡単にトラッキングすることができます。</p>

<!-- more -->


<h2>トラッキング ID を発行する</h2>

<p>Google Analytics の「アカウントの管理」画面で新しいアカウントを追加します。</p>

<p><img src="/images/blog/analytics_add_account.png" alt="アカウントの管理" /></p>

<p>次にアカウント名などの情報を記入します。</p>

<p><img src="/images/blog/analytics_create_account.png" alt="アカウントの追加" /></p>

<p>「ウェブサイトのURL」では "ウェブサイト以外"、「タイムゾーン」は "日本" を選択しておくとよいでしょう。</p>

<p>アカウントを作成した後、"UA-xxxxxxxx-1" のようなトラッキング ID が発行されます。あとで使用するので控えておいてください。</p>

<h2>Google Analytics SDK for iOS をダウンロード</h2>

<p><a href="https://developers.google.com/analytics/devguides/collection/ios/resources">Google Analytics SDK for iOS</a> から、SDK をダウンロードしておきます。</p>

<p><img src="/images/blog/analytics_sdk.png" alt="SDK のダウンロード" /></p>

<h2>RubyMotion プロジェクトを作成</h2>

<p>それでは、アプリに Google Analytics を組み込んでいきましょう。今回は「HelloAnalytics」という名前でアプリを作成します。</p>

<p><code>
$ motion create HelloAnalytics
</code></p>

<p>先ほどダウンロードした SDK のアーカイブを展開し、"Library" ディレクトリをプロジェクトに追加します。まずプロジェクトに "vendor" ディレクトリを作成しましょう。</p>

<p><code>
$ cd HelloAnalytics/
$ mkdir vendor
</code></p>

<p>作成したディレクトリに SDK の "Library" を追加します。以下のようなファイル構成になります。</p>

<p>```
$ tree vendor/
vendor/
└── Library</p>

<pre><code>├── GANTracker.h
├── libGoogleAnalytics.a
└── libGoogleAnalytics_NoThumb.a
</code></pre>

<p>```</p>

<h2>プロジェクトの設定</h2>

<p>プロジェクトの <code>Rakefile</code> をエディタで開き SDK を使うための設定をします。</p>

<p>```ruby</p>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'HelloAnalytics'
  app.vendor_project('vendor/Library',</p>

<pre><code>:static, :products =&gt; ['libGoogleAnalytics.a'], :headers_dir =&gt; '.')
</code></pre>

<p>  app.frameworks &lt;&lt; "CFNetwork"
  app.libs &lt;&lt; "/usr/lib/libsqlite3.dylib"
end
```</p>

<p><code>vendor_project</code> を設定し Google Analytics SDK を利用できるようにします。SDK は CFNetwork.framework と libsqlite3.dylib を使用するようなので、<code>frameworks</code> と <code>libs</code> でそれぞれ設定します。</p>

<p>これでアプリで Google Analytics SDK を使えるようになります！</p>

<h2>トラッキングを開始</h2>

<p>それでは、以下のようなコードをアプリに追加してトラッキングを開始してみましょう。</p>

<p>```ruby
class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>GANTracker.sharedTracker.startTrackerWithAccountID("UA-xxxxxxxx-1",
                                                   dispatchPeriod: 10,
                                                   delegate: nil)


error = Pointer.new(:object)
unless GANTracker.sharedTracker.trackPageview("/app_entry_point",
                                              withError: error)
  # Handle error here
end

true
</code></pre>

<p>  end
end
```</p>

<p><code>startTrackerWithAccountID</code> メソッドには、先ほど発行されたトラッキング ID を記述します。</p>

<p>アプリを実行すると、計測結果が Google Analytics で確認できるようになります。</p>

<p><img src="/images/blog/analytics_result.png" alt="計測結果" /></p>

<p><a href="https://developers.google.com/analytics/devguides/collection/ios/devguide">https://developers.google.com/analytics/devguides/collection/ios/devguide</a> に SDK の使い方について詳しく書かれていますので、必要なトラッキング処理をアプリに追加しいろいろ計測してみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 4.3 を対象としたアプリケーションを作る]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/29/make-an-application-which-target-the-ios-4/"/>
    <updated>2012-08-29T21:02:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/29/make-an-application-which-target-the-ios-4</id>
    <content type="html"><![CDATA[<p>RubyMotion は、iOS 4.3 以降を対象としたアプリケーションを作ることができます。プロジェクトの設定や、シミュレータの起動方法について書きたいと思います。個人的には世の中が iOS 5.x だけになると、みんなハッピーになれそうな気がするのですが・・・(^ ^;)</p>

<div class="note">
今のところ OS X 10.8 環境では iOS 4.3 シミュレータをインストールできないようなので、OS X 10.7 環境が必要となるので注意してください。
</div>




<!-- more -->


<h2>iOS 4.3 シミュレータをインストール</h2>

<p>もし、iOS 4.3 シミュレータをお持ちでなければインストールしておきます。Xcode の [Preferences...] メニューの [Downloads] タブでシミュレータをインストールすることができます。</p>

<p><img src="/images/blog/install_ios43_simulator.png" alt="install iOS 4.3 simulator" /></p>

<div class="note">
OS X 10.7 環境では「iOS 4.3 Simulator」項目があるのですが、OS X 10.8 では表示されずインストールできないようです。
</div>


<h2>プロジェクトの設定</h2>

<p>プロジェクトの <code>Rakefile</code> で <code>deployment_target</code> を設定し、アプリケーションのターゲットを iOS 4.3 にします。</p>

<p>```ruby</p>

<h1>-<em>- coding: utf-8 -</em>-</h1>

<p>$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'</p>

<p>Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'your app name'
  app.deployment_target = "4.3"
end
```</p>

<h2>アプリケーションを実行</h2>

<p>単に <code>rake</code> を実行すると iOS 5.1 用のシミュレータが起動しますので、環境変数 <code>target</code> でiOS 4.3 シミュレータを起動するように指定します。</p>

<p><code>
$ rake target=4.3
</code></p>

<p>ほかの環境変数とあわせて利用できるので、たとえば iPad シミュレータを起動する場合には以下のように実行します。</p>

<p><code>
$ rake target=4.3 device_family=ipad
</code></p>

<p>あとはアプリケーションのコードをひたすら記述するだけですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text を導入して RubyMotion アプリ開発をもっと楽しいものに]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/23/make-a-sublime-text-environment/"/>
    <updated>2012-08-23T22:19:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/23/make-a-sublime-text-environment</id>
    <content type="html"><![CDATA[<p>Twitter のつぶやきを眺めていると、RubyMotion アプリ開発では <a href="http://www.sublimetext.com/">Sublime Text</a> をエディタに使うのが定番になってきた感じがします。</p>

<p>いい加減、私もライセンスを購入しないといけないなと思いつつ、環境構築の手順などをまとめておきます。</p>

<!-- more -->


<h2>1. Sublime Text をインストール</h2>

<p><a href="http://www.sublimetext.com/">公式サイト</a> から Sublime Text をダウンロードしてインストールします。</p>

<h2>2. Sublime Package Control をインストール</h2>

<p>Sublime Text は Python で plugin を作成でき、さまざまな機能追加ができるようになっています。Github などを眺めていると便利な plugin がパッケージとしていろいろあります。<a href="http://wbond.net/sublime_packages/package_control">Package Control</a> は、それらパッケージのインストールや不要になった際にはアンインストールしたりと、文字通りパッケージの管理が簡単になります。</p>

<p>Sublime Text を起動し、[View] -> [Show Console] とメニューを選択し (ショートカット : <kbd>control</kbd> + <kbd>`</kbd>)、コンソールに次の文をコピー&amp;ペーストし <kbd>Enter</kbd> を押下して実行します。</p>

<p><code>
import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'
</code></p>

<p>Sublime Text を再起動すると、Package Control が利用できるようになります。</p>

<h2>3. SublimeRubyMotionBuilder をインストール</h2>

<p>次に、<a href="https://twitter.com/haraken3">@haraken3</a> さんが開発されている <a href="https://github.com/haraken3/SublimeRubyMotionBuilder">SublimeRubyMotionBuilder</a> プラグインを導入します。コード補完や、アプリ開発に便利な機能が追加されます。</p>

<p>[Tools] -> [Command Palette...] とメニューを選択し (ショートカット : <kbd>command</kbd> + <kbd>shift</kbd> + <kbd>p</kbd>)、表示されるダイアログに「install package」と入力し実行します。</p>

<p><img src="/images/blog/sublime-install-package.png" alt="install package dialog" /></p>

<p>次に、「RubyMotionBuilder」と入力し <kbd>Enter</kbd> を押下するとプラグインがインストールされます。</p>

<p><img src="/images/blog/sublime-RubyMotionBuilder.png" alt="RubyMotionBuilder" /></p>

<p>RubyMotion のコード(*.rb) か Rakefile を開いた状態にしておくと、以下のようなコマンドが使えるようになり、いちいち Terminal に戻ってでビルドしたりする必要がなくなり便利です。</p>

<table class="table">
<tr><th>内容</th><th>ショートカット</th></tr>
<tr>
    <td>Build</td>
    <td><kbd>command</kbd> + <kbd>b</kbd> <br />(エラーがあった場合 <kbd>F4</kbd> でジャンプ)</td>
</tr>
<tr>
    <td>Clean</td>
    <td><kbd>command</kbd> + <kbd>shift</kbd> + <kbd>p</kbd> の後、「clean」と入力</td>
</tr>
<tr>
    <td>Run</td>
    <td><kbd>command</kbd> + <kbd>r</kbd> <br />(シミュレータを Retina モードにする場合、<kbd>command</kbd> + <kbd>shift</kbd> + <kbd>r</kbd> )</td>
</tr>
<tr>
    <td>Deploy</td>
    <td><kbd>command</kbd> + <kbd>option</kbd> + <kbd>b</kbd></td>
</tr>

</table>


<h2>4. SublimeLinter をインストール</h2>

<p><a href="http://www.willprater.me/blog/2012/07/24/rubymotion-linting-and-highlighting-with-sublime-text/">RubyMotion Linting and Highlighting With Sublime Text</a> で知ったのですが、<a href="https://github.com/SublimeLinter/SublimeLinter">SublimeLinter</a> を導入すると、アプリをコンパイルする前に文法エラーとなる箇所を教えてくれるようになります。</p>

<p><img src="/images/blog/sublime-SublimeLinter.png" alt="SublimeLinter" /></p>

<p>さっそく、SublimeLinter をインストールしてみましょう(上のサイトに書いてあるとおりですが・・・)。</p>

<p>[Tools] -> [Command Palette...] とメニューを選択し (ショートカット : <kbd>command</kbd> + <kbd>shift</kbd> + <kbd>p</kbd>)、表示されるダイアログに「install package」と入力し実行します。「SublimeLinter」と入力し <kbd>Enter</kbd> を押下します。</p>

<p>つぎに [Preferences] -> [Browse Packages...] を選択します。</p>

<p><img src="/images/blog/sublime-browse-package.png" alt="Browse Packages" /></p>

<p>パッケージがインストールされているディレクトリが、Finder で開かれます。 Finder で <code>SublimeLinter/sublimelinter/modules</code> のディレクトリまで行き、<code>ruby_motion.py</code> というファイルを作成し、次の内容をコピー&amp;ペースとします。</p>

<p>```python ruby_motion.py
from ruby import Linter</p>

<p>CONFIG = {</p>

<pre><code>'language': 'RubyMotion',
'executable': '/Library/RubyMotion/bin/ruby',
'lint_args': '-wc'
</code></pre>

<p>}
```</p>

<p>これで RubyMotion アプリ開発がもっと楽になるのではないでしょうか〜。 Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CGGradient を使ってグラデーションを作る]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/22/make-a-gradient/"/>
    <updated>2012-08-22T22:59:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/22/make-a-gradient</id>
    <content type="html"><![CDATA[<p>RubyMotion で <a href="https://developer.apple.com/library/mac/#documentation/graphicsimaging/reference/CGGradient/Reference/reference.html">CGGradient</a> を使ってグラデーションを作る際に 2 点ほどポイントがありそうです。</p>

<!-- more -->


<h2>1. Pointer クラスを使用する</h2>

<p>CGGradient オブジェクトを作成する際に使用する関数 <code>CGGradientCreateWithColorComponents</code> は <code>CGFloat</code> 型の配列を受け取ります(変数 <code>components</code>, <code>locations</code> に注目してください)。</p>

<p><code>c
CGGradientRef CGGradientCreateWithColorComponents(
   CGColorSpaceRef space,
   const CGFloat components[],
   const CGFloat locations[],
   size_t count
);
</code></p>

<p>もし引数が Ruby の Array クラスや、Objective-C の NSArray を受け取るなら話は簡単なのですが、ここでは <code>CGFloat</code> 型の配列なので、RubyMotion で用意されている Pointer クラスを使い <code>CGFloat</code> 型の配列と同等のものを作ります。以下のようなコードになります。</p>

<p><code>ruby
float_array = Pointer.new(:float, size)
</code></p>

<h2>2. kCGGradientDrawsXXXX 定数</h2>

<p>CGGradient では <code>kCGGradientDrawsBeforeStartLocation</code> と <code>kCGGradientDrawsAfterEndLocation</code> という定数が用意されています。どちらも小文字から始まる定数です。</p>

<p>RubyMotion では英小文字から始まる定数は、一文字目を大文字に書き換えて利用してあげる必要があります。</p>

<p><code>kCGGradientDrawsAfterEndLocation</code> は <code>KCGGradientDrawsAfterEndLocation</code> になります。</p>

<h2>いざ動かしてみる</h2>

<p>```ruby app_delegate.rb
class Array
  def to_pointer(type)</p>

<pre><code># Ruby の Array オブジェクトを Pointer クラスを使ったものに変換
pointer = Pointer.new(type, self.size)
self.each_with_index do |v, i|
  pointer[i] = v
end
pointer
</code></pre>

<p>  end
end</p>

<p>class GradientView &lt; UIView
  def drawRect(rect)</p>

<pre><code>super

context = UIGraphicsGetCurrentContext()
CGContextSaveGState(context)

CGContextAddRect(context, self.frame)
space = CGColorSpaceCreateDeviceRGB()

comp = [
    0.0, 0.0, 1.0, 1.0, # Blue
    1.0, 0.0, 0.0, 1.0, # Red
    0.0, 1.0, 0.0, 1.0  # Green
]
components = comp.to_pointer(:float)

loc = [0.0, 0.5, 1.0]
locations = loc.to_pointer(:float)

count = loc.size
frame = self.bounds
start_point = frame.origin
end_point = CGPointMake(frame.origin.x + frame.size.width, frame.origin.y)
gradient = CGGradientCreateWithColorComponents(space, components, locations, count)

CGContextDrawLinearGradient(context,
                            gradient,
                            start_point,
                            end_point,
                            KCGGradientDrawsAfterEndLocation) # 定数を英大文字で始める
CGContextRestoreGState(context)
</code></pre>

<p>  end</p>

<p>end</p>

<p>class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)</p>

<pre><code>@window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)
@window.rootViewController = UIViewController.alloc.initWithNibName(nil, bundle: nil)

@view = GradientView.alloc.initWithFrame(CGRectMake(10, 10, 100, 100))
@window.rootViewController.view.addSubview(@view)
@window.makeKeyAndVisible

true
</code></pre>

<p>  end
end
```</p>

<p>次のような View が表示されるはずです。</p>

<p><img src="/images/blog/gradient.png" alt="Gradient" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion の Articles を翻訳しました]]></title>
    <link href="http://watson1978.github.com/blog/2012/08/01/translating-rubymotion-articles/"/>
    <updated>2012-08-01T23:31:00+09:00</updated>
    <id>http://watson1978.github.com/blog/2012/08/01/translating-rubymotion-articles</id>
    <content type="html"><![CDATA[<p>最近は <a href="https://github.com/RubyMotionJP">RubyMotionJP</a> でちまちま作業しており、RubyMotion の公式サイトの <a href="http://www.rubymotion.com/developer-center/">Developer Center</a> で公開されている記事を翻訳しました。</p>

<p>翻訳した記事は <a href="http://rubymotion.jp/">rubymotion.jp</a> で公開しております。誤訳などありましたら、pull request いただけると大変ありがたいです。</p>
]]></content>
  </entry>
  
</feed>
